// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.IdServer.Host.Acceptance.Tests.Features.GrantTypes
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UMAGrantTypeErrorsFeature : object, Xunit.IClassFixture<UMAGrantTypeErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UMAGrantTypeErrors.feature"
#line hidden
        
        public UMAGrantTypeErrorsFeature(UMAGrantTypeErrorsFeature.FixtureData fixtureData, SimpleIdServer_IdServer_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/GrantTypes", "UMAGrantTypeErrors", "\tCheck errors returned when using \'urn:ietf:params:oauth:grant-type:uma-ticket\' g" +
                    "rant-type\t", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="ticket parameter is required")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "ticket parameter is required")]
        public void TicketParameterIsRequired()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ticket parameter is required", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table326 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table326.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
#line 5
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table326, "When ");
#line hidden
#line 9
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.And("JSON \'$.error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("JSON \'$.error_description\'=\'missing parameter ticket\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="claim_token_format parameter is required when claim_token is passed")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "claim_token_format parameter is required when claim_token is passed")]
        public void Claim_Token_FormatParameterIsRequiredWhenClaim_TokenIsPassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("claim_token_format parameter is required when claim_token is passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table327 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table327.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table327.AddRow(new string[] {
                            "ticket",
                            "ticket"});
                table327.AddRow(new string[] {
                            "claim_token",
                            "token"});
#line 16
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table327, "When ");
#line hidden
#line 22
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.And("JSON \'$.error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And("JSON \'$.error_description\'=\'missing parameter claim_token_format\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="claim_token parameter is required when claim_token_format is passed")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "claim_token parameter is required when claim_token_format is passed")]
        public void Claim_TokenParameterIsRequiredWhenClaim_Token_FormatIsPassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("claim_token parameter is required when claim_token_format is passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table328 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table328.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table328.AddRow(new string[] {
                            "ticket",
                            "ticket"});
                table328.AddRow(new string[] {
                            "claim_token_format",
                            "format"});
#line 29
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table328, "When ");
#line hidden
#line 35
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
 testRunner.And("JSON \'$.error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("JSON \'$.error_description\'=\'missing parameter claim_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="ticket must be valid")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "ticket must be valid")]
        public void TicketMustBeValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ticket must be valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table329 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table329.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table329.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table329.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table329.AddRow(new string[] {
                            "ticket",
                            "ticket"});
                table329.AddRow(new string[] {
                            "claim_token",
                            "token"});
                table329.AddRow(new string[] {
                            "claim_token_format",
                            "format"});
#line 42
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table329, "When ");
#line hidden
#line 51
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.And("JSON \'$.error\'=\'invalid_grant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And("JSON \'$.error_description\'=\'permission ticket is not correct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="client_token_format must be valid")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "client_token_format must be valid")]
        public void Client_Token_FormatMustBeValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("client_token_format must be valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table330 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table330.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table330.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table330.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table330.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 58
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table330, "When ");
#line hidden
#line 65
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table331 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table331.AddRow(new string[] {
                            "resource_scopes",
                            "[scope1]"});
                table331.AddRow(new string[] {
                            "subject",
                            "user1"});
                table331.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table331.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table331.AddRow(new string[] {
                            "name#en",
                            "name"});
                table331.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table331.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table331.AddRow(new string[] {
                            "type",
                            "type"});
                table331.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 68
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table331, "And ");
#line hidden
#line 80
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
 testRunner.And("extract parameter \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table332 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table332.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table332.AddRow(new string[] {
                            "resource_scopes",
                            "[scope1]"});
                table332.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 83
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table332, "And ");
#line hidden
#line 89
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.And("extract parameter \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table333 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table333.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table333.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table333.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table333.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table333.AddRow(new string[] {
                            "claim_token",
                            "token"});
                table333.AddRow(new string[] {
                            "claim_token_format",
                            "format"});
#line 92
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table333, "And ");
#line hidden
#line 101
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.And("JSON \'$.error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.And("JSON \'$.error_description\'=\'token format format is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="claim_token must be a valid JWT")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "claim_token must be a valid JWT")]
        public void Claim_TokenMustBeAValidJWT()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("claim_token must be a valid JWT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 107
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table334 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table334.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table334.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table334.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table334.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 108
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table334, "When ");
#line hidden
#line 115
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table335 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table335.AddRow(new string[] {
                            "resource_scopes",
                            "[scope1]"});
                table335.AddRow(new string[] {
                            "subject",
                            "user1"});
                table335.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table335.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table335.AddRow(new string[] {
                            "name#en",
                            "name"});
                table335.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table335.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table335.AddRow(new string[] {
                            "type",
                            "type"});
                table335.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 118
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table335, "And ");
#line hidden
#line 130
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
 testRunner.And("extract parameter \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table336 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table336.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table336.AddRow(new string[] {
                            "resource_scopes",
                            "[scope1]"});
                table336.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 133
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table336, "And ");
#line hidden
#line 139
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.And("extract parameter \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table337 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table337.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table337.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table337.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table337.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table337.AddRow(new string[] {
                            "claim_token",
                            "token"});
                table337.AddRow(new string[] {
                            "claim_token_format",
                            "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
#line 142
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table337, "And ");
#line hidden
#line 151
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 154
 testRunner.And("JSON \'$.error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
 testRunner.And("JSON \'$.error_description\'=\'JSON Web Token cannot be read\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="scope must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "scope must be supported")]
        public void ScopeMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("scope must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 157
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table338 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table338.AddRow(new string[] {
                            "sub",
                            "random"});
#line 158
 testRunner.Given("build JWS id_token_hint and sign with the key \'keyid\'", ((string)(null)), table338, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table339 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table339.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table339.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table339.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table339.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 162
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table339, "When ");
#line hidden
#line 169
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table340 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table340.AddRow(new string[] {
                            "resource_scopes",
                            "[scope1]"});
                table340.AddRow(new string[] {
                            "subject",
                            "user1"});
                table340.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table340.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table340.AddRow(new string[] {
                            "name#en",
                            "name"});
                table340.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table340.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table340.AddRow(new string[] {
                            "type",
                            "type"});
                table340.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 172
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table340, "And ");
#line hidden
#line 184
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 185
 testRunner.And("extract parameter \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table341 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table341.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table341.AddRow(new string[] {
                            "resource_scopes",
                            "[scope1]"});
                table341.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 187
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table341, "And ");
#line hidden
#line 193
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
 testRunner.And("extract parameter \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table342 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table342.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table342.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table342.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table342.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table342.AddRow(new string[] {
                            "claim_token",
                            "$id_token_hint$"});
                table342.AddRow(new string[] {
                            "claim_token_format",
                            "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
                table342.AddRow(new string[] {
                            "scope",
                            "invalid"});
#line 196
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table342, "And ");
#line hidden
#line 206
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 208
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 209
 testRunner.And("JSON \'$.error\'=\'invalid_scope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 210
 testRunner.And("JSON \'$.error_description\'=\'At least one of the scopes included in the request do" +
                        "es not match an available scope for any of the resources associated with request" +
                        "ed permissions for the permission ticket provided by the client.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="claim_token must contains the claims")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "claim_token must contains the claims")]
        public void Claim_TokenMustContainsTheClaims()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("claim_token must contains the claims", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 212
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table343 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table343.AddRow(new string[] {
                            "sub",
                            "user"});
#line 213
 testRunner.Given("build JWS id_token_hint and sign with the key \'keyid\'", ((string)(null)), table343, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table344 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table344.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table344.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table344.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table344.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 217
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table344, "When ");
#line hidden
#line 224
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 225
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table345 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table345.AddRow(new string[] {
                            "resource_scopes",
                            "[scope1]"});
                table345.AddRow(new string[] {
                            "subject",
                            "user1"});
                table345.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table345.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table345.AddRow(new string[] {
                            "name#en",
                            "name"});
                table345.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table345.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table345.AddRow(new string[] {
                            "type",
                            "type"});
                table345.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 227
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table345, "And ");
#line hidden
#line 239
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 240
 testRunner.And("extract parameter \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table346 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table346.AddRow(new string[] {
                            "permissions",
                            "[ { \"claims\": [ { \"name\": \"sub\", \"value\": \"user\" }, { \"name\": \"email\", \"value\": \"" +
                                "user@hotmail.com\" } ], \"scopes\": [ \"scope1\" ] } ]"});
                table346.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 242
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table346, "And ");
#line hidden
                TechTalk.SpecFlow.Table table347 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table347.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table347.AddRow(new string[] {
                            "resource_scopes",
                            "[scope1]"});
                table347.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 247
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table347, "And ");
#line hidden
#line 253
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 254
 testRunner.And("extract parameter \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table348 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table348.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table348.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table348.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table348.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table348.AddRow(new string[] {
                            "claim_token",
                            "$id_token_hint$"});
                table348.AddRow(new string[] {
                            "claim_token_format",
                            "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
                table348.AddRow(new string[] {
                            "scope",
                            "scope1"});
#line 256
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table348, "And ");
#line hidden
#line 266
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 268
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 269
 testRunner.And("JSON \'$.need_info.required_claims[0].claim_token_format\'=\'http://openid.net/specs" +
                        "/openid-connect-core-1_0.html#IDToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 270
 testRunner.And("JSON \'$.need_info.required_claims[0].name\'=\'email\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User must be authorized")]
        [Xunit.TraitAttribute("FeatureTitle", "UMAGrantTypeErrors")]
        [Xunit.TraitAttribute("Description", "User must be authorized")]
        public void UserMustBeAuthorized()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User must be authorized", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 272
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table349 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table349.AddRow(new string[] {
                            "sub",
                            "user1"});
                table349.AddRow(new string[] {
                            "email",
                            "user@hotmail.fr"});
#line 273
 testRunner.Given("build JWS id_token_hint and sign with the key \'keyid\'", ((string)(null)), table349, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table350 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table350.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table350.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table350.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table350.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 278
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table350, "When ");
#line hidden
#line 285
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 286
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table351 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table351.AddRow(new string[] {
                            "resource_scopes",
                            "[scope1]"});
                table351.AddRow(new string[] {
                            "subject",
                            "user1"});
                table351.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table351.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table351.AddRow(new string[] {
                            "name#en",
                            "name"});
                table351.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table351.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table351.AddRow(new string[] {
                            "type",
                            "type"});
                table351.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 288
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table351, "And ");
#line hidden
#line 300
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 301
 testRunner.And("extract parameter \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table352 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table352.AddRow(new string[] {
                            "permissions",
                            "[ { \"claims\": [ { \"name\": \"sub\", \"value\": \"user\" }, { \"name\": \"email\", \"value\": \"" +
                                "user@hotmail.com\" } ], \"scopes\": [ \"scope1\" ] } ]"});
                table352.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 303
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table352, "And ");
#line hidden
                TechTalk.SpecFlow.Table table353 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table353.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table353.AddRow(new string[] {
                            "resource_scopes",
                            "[scope1]"});
                table353.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 308
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table353, "And ");
#line hidden
#line 314
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 315
 testRunner.And("extract parameter \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table354 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table354.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table354.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table354.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table354.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table354.AddRow(new string[] {
                            "claim_token",
                            "$id_token_hint$"});
                table354.AddRow(new string[] {
                            "claim_token_format",
                            "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
                table354.AddRow(new string[] {
                            "scope",
                            "scope1"});
#line 317
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table354, "And ");
#line hidden
#line 327
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 329
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 330
 testRunner.And("JSON \'$.request_submitted.ticket\'=\'$ticket$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 331
 testRunner.And("JSON \'$.request_submitted.interval\'=\'5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UMAGrantTypeErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UMAGrantTypeErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
