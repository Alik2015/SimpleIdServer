// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.IdServer.Host.Acceptance.Tests.Features.GrantTypes
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class HappyFlowsFeature : object, Xunit.IClassFixture<HappyFlowsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "HappyFlows.feature"
#line hidden
        
        public HappyFlowsFeature(HappyFlowsFeature.FixtureData fixtureData, SimpleIdServer_IdServer_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/GrantTypes", "HappyFlows", "\tRun happy flows for all the grant types", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'client_credentials\' grant type to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'client_credentials\' grant type to get an access token")]
        public void UseClient_CredentialsGrantTypeToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'client_credentials\' grant type to get an access token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table198.AddRow(new string[] {
                            "client_id",
                            "firstClient"});
                table198.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table198.AddRow(new string[] {
                            "scope",
                            "firstScope"});
                table198.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 5
 testRunner.When("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table198, "When ");
#line hidden
#line 12
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And("JSON \'$.scope\'=\'firstScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And("JSON \'$.token_type\'=\'Bearer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.And("JSON \'$.expires_in\'=\'1800\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("access_token audience contains \'firstClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("access_token audience contains \'secondClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("access_token scope contains \'firstScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And("access_token alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And("access_token kid equals to \'keyid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'password\' grant type to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'password\' grant type to get an access token")]
        public void UsePasswordGrantTypeToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'password\' grant type to get an access token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table199.AddRow(new string[] {
                            "client_id",
                            "secondClient"});
                table199.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table199.AddRow(new string[] {
                            "scope",
                            "firstScope"});
                table199.AddRow(new string[] {
                            "grant_type",
                            "password"});
                table199.AddRow(new string[] {
                            "username",
                            "user"});
                table199.AddRow(new string[] {
                            "password",
                            "password"});
#line 25
 testRunner.When("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table199, "When ");
#line hidden
#line 34
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
 testRunner.And("JSON \'$.scope\'=\'firstScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("JSON \'$.token_type\'=\'Bearer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("JSON \'$.expires_in\'=\'1800\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.And("access_token audience contains \'firstClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And("access_token audience contains \'secondClient\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And("access_token scope contains \'firstScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("access_token alg equals to \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.And("access_token kid equals to \'keyid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'authorization_code\' grant type to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'authorization_code\' grant type to get an access token")]
        public void UseAuthorization_CodeGrantTypeToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'authorization_code\' grant type to get an access token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table200.AddRow(new string[] {
                            "response_type",
                            "code"});
                table200.AddRow(new string[] {
                            "client_id",
                            "thirdClient"});
                table200.AddRow(new string[] {
                            "state",
                            "state"});
                table200.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table200.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table200.AddRow(new string[] {
                            "scope",
                            "secondScope"});
#line 48
 testRunner.When("execute HTTP GET request \'https://localhost:8080/authorization\'", ((string)(null)), table200, "When ");
#line hidden
#line 57
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("extract parameter \'state\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table201.AddRow(new string[] {
                            "client_id",
                            "thirdClient"});
                table201.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table201.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table201.AddRow(new string[] {
                            "code",
                            "$code$"});
                table201.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 60
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table201, "And ");
#line hidden
#line 68
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
 testRunner.And("JSON \'$.scope\'=\'secondScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.And("JSON \'$.token_type\'=\'Bearer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And("JSON \'$.expires_in\'=\'1800\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("parameter \'state\'=\'state\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'authorization_code\' grant type to get an access token and use PAR")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'authorization_code\' grant type to get an access token and use PAR")]
        public void UseAuthorization_CodeGrantTypeToGetAnAccessTokenAndUsePAR()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'authorization_code\' grant type to get an access token and use PAR", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 77
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table202.AddRow(new string[] {
                            "response_type",
                            "code"});
                table202.AddRow(new string[] {
                            "client_id",
                            "thirdClient"});
                table202.AddRow(new string[] {
                            "state",
                            "state"});
                table202.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table202.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table202.AddRow(new string[] {
                            "scope",
                            "secondScope"});
#line 78
 testRunner.When("execute HTTP POST request \'https://localhost:8080/par\'", ((string)(null)), table202, "When ");
#line hidden
#line 87
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And("extract parameter \'request_uri\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table203.AddRow(new string[] {
                            "client_id",
                            "thirdClient"});
                table203.AddRow(new string[] {
                            "request_uri",
                            "$request_uri$"});
#line 90
 testRunner.And("execute HTTP GET request \'https://localhost:8080/authorization\'", ((string)(null)), table203, "And ");
#line hidden
#line 95
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.And("extract parameter \'state\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table204.AddRow(new string[] {
                            "client_id",
                            "thirdClient"});
                table204.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table204.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table204.AddRow(new string[] {
                            "code",
                            "$code$"});
                table204.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 98
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table204, "And ");
#line hidden
#line 106
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
 testRunner.And("JSON \'$.scope\'=\'secondScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
 testRunner.And("JSON \'$.token_type\'=\'Bearer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.And("JSON \'$.expires_in\'=\'1800\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
 testRunner.And("parameter \'state\'=\'state\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'authorization_code\' grant type to get an access token and use PAR and RAR")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'authorization_code\' grant type to get an access token and use PAR and RAR")]
        public void UseAuthorization_CodeGrantTypeToGetAnAccessTokenAndUsePARAndRAR()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'authorization_code\' grant type to get an access token and use PAR and RAR", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 115
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table205.AddRow(new string[] {
                            "response_type",
                            "code token"});
                table205.AddRow(new string[] {
                            "client_id",
                            "fiftyFiveClient"});
                table205.AddRow(new string[] {
                            "state",
                            "state"});
                table205.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table205.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table205.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table205.AddRow(new string[] {
                            "authorization_details",
                            "{ \"type\" : \"secondDetails\", \"locations\": [ \"https://cal.example.com\" ], \"actions\"" +
                                ": [ \"read\" ] }"});
#line 116
 testRunner.When("execute HTTP POST request \'https://localhost:8080/par\'", ((string)(null)), table205, "When ");
#line hidden
#line 126
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
 testRunner.And("extract parameter \'request_uri\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table206.AddRow(new string[] {
                            "client_id",
                            "fiftyFiveClient"});
                table206.AddRow(new string[] {
                            "request_uri",
                            "$request_uri$"});
#line 129
 testRunner.And("execute HTTP GET request \'https://localhost:8080/authorization\'", ((string)(null)), table206, "And ");
#line hidden
#line 134
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
 testRunner.And("extract parameter \'state\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table207.AddRow(new string[] {
                            "client_id",
                            "fiftyFiveClient"});
                table207.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table207.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table207.AddRow(new string[] {
                            "code",
                            "$code$"});
                table207.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 137
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table207, "And ");
#line hidden
#line 145
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
 testRunner.And("extract payload from JWT \'$access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 149
 testRunner.Then("JWT has authorization_details type \'secondDetails\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 150
 testRunner.And("JWT has authorization_details action \'read\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'refresh_token\' grant type to get an access token")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'refresh_token\' grant type to get an access token")]
        public void UseRefresh_TokenGrantTypeToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'refresh_token\' grant type to get an access token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 152
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table208.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
                table208.AddRow(new string[] {
                            "scope",
                            "secondScope"});
                table208.AddRow(new string[] {
                            "client_id",
                            "sixClient"});
                table208.AddRow(new string[] {
                            "client_secret",
                            "password"});
#line 153
 testRunner.When("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table208, "When ");
#line hidden
#line 160
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 161
 testRunner.And("extract parameter \'$.refresh_token\' from JSON body into \'refreshToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table209.AddRow(new string[] {
                            "grant_type",
                            "refresh_token"});
                table209.AddRow(new string[] {
                            "refresh_token",
                            "$refreshToken$"});
                table209.AddRow(new string[] {
                            "client_id",
                            "sixClient"});
                table209.AddRow(new string[] {
                            "client_secret",
                            "password"});
#line 163
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table209, "And ");
#line hidden
#line 170
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
 testRunner.And("JSON \'$.scope\'=\'secondScope\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
 testRunner.And("JSON \'$.token_type\'=\'Bearer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
 testRunner.And("JSON \'$.expires_in\'=\'1800\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (POLL" +
            " mode)")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (POLL" +
            " mode)")]
        public void UseUrnOpenidParamsGrant_TypeCibaGrantTypeToGetAnIdentityTokenPOLLMode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (POLL" +
                    " mode)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 176
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 177
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table210.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table210.AddRow(new string[] {
                            "client_id",
                            "fourteenClient"});
                table210.AddRow(new string[] {
                            "state",
                            "state"});
                table210.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table210.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table210.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table210.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 179
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table210, "When ");
#line hidden
#line 189
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table211.AddRow(new string[] {
                            "client_id",
                            "fortyNineClient"});
                table211.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table211.AddRow(new string[] {
                            "scope",
                            "admin calendar"});
                table211.AddRow(new string[] {
                            "login_hint",
                            "user"});
                table211.AddRow(new string[] {
                            "user_code",
                            "password"});
#line 191
 testRunner.And("execute HTTP POST request \'https://localhost:8080/bc-authorize\'", ((string)(null)), table211, "And ");
#line hidden
#line 199
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
 testRunner.And("extract parameter \'auth_req_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table212.AddRow(new string[] {
                            "Authorization",
                            "Bearer $id_token$"});
                table212.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
                table212.AddRow(new string[] {
                            "action",
                            "0"});
#line 202
 testRunner.And("execute HTTP POST JSON request \'http://localhost/bc-callback\'", ((string)(null)), table212, "And ");
#line hidden
                TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table213.AddRow(new string[] {
                            "grant_type",
                            "urn:openid:params:grant-type:ciba"});
                table213.AddRow(new string[] {
                            "client_id",
                            "fortyNineClient"});
                table213.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table213.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
#line 208
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table213, "And ");
#line hidden
#line 215
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 217
 testRunner.And("JSON exists \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (PUSH" +
            " mode)")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (PUSH" +
            " mode)")]
        public void UseUrnOpenidParamsGrant_TypeCibaGrantTypeToGetAnIdentityTokenPUSHMode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (PUSH" +
                    " mode)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 219
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 220
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table214.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table214.AddRow(new string[] {
                            "client_id",
                            "fourteenClient"});
                table214.AddRow(new string[] {
                            "state",
                            "state"});
                table214.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table214.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table214.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table214.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 222
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table214, "When ");
#line hidden
#line 232
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table215.AddRow(new string[] {
                            "client_id",
                            "fiftyOneClient"});
                table215.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table215.AddRow(new string[] {
                            "scope",
                            "admin calendar"});
                table215.AddRow(new string[] {
                            "login_hint",
                            "user"});
                table215.AddRow(new string[] {
                            "user_code",
                            "password"});
                table215.AddRow(new string[] {
                            "client_notification_token",
                            "04bcf708-dfba-4719-a3d3-b213322e2c38"});
#line 234
 testRunner.And("execute HTTP POST request \'https://localhost:8080/bc-authorize\'", ((string)(null)), table215, "And ");
#line hidden
#line 243
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 244
 testRunner.And("extract parameter \'auth_req_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table216.AddRow(new string[] {
                            "Authorization",
                            "Bearer $id_token$"});
                table216.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
                table216.AddRow(new string[] {
                            "action",
                            "0"});
#line 246
 testRunner.And("execute HTTP POST JSON request \'http://localhost/bc-callback\'", ((string)(null)), table216, "And ");
#line hidden
#line 252
 testRunner.And("polls until notification is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 254
 testRunner.Then("JSON exists \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (PING" +
            " mode)")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (PING" +
            " mode)")]
        public void UseUrnOpenidParamsGrant_TypeCibaGrantTypeToGetAnIdentityTokenPINGMode()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (PING" +
                    " mode)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 256
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 257
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table217.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table217.AddRow(new string[] {
                            "client_id",
                            "fourteenClient"});
                table217.AddRow(new string[] {
                            "state",
                            "state"});
                table217.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table217.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table217.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table217.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 259
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table217, "When ");
#line hidden
#line 269
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table218.AddRow(new string[] {
                            "client_id",
                            "fiftyTwoClient"});
                table218.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table218.AddRow(new string[] {
                            "scope",
                            "admin calendar"});
                table218.AddRow(new string[] {
                            "login_hint",
                            "user"});
                table218.AddRow(new string[] {
                            "user_code",
                            "password"});
                table218.AddRow(new string[] {
                            "client_notification_token",
                            "04bcf708-dfba-4719-a3d3-b213322e2c38"});
#line 271
 testRunner.And("execute HTTP POST request \'https://localhost:8080/bc-authorize\'", ((string)(null)), table218, "And ");
#line hidden
#line 280
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 281
 testRunner.And("extract parameter \'auth_req_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table219.AddRow(new string[] {
                            "Authorization",
                            "Bearer $id_token$"});
                table219.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
                table219.AddRow(new string[] {
                            "action",
                            "0"});
#line 283
 testRunner.And("execute HTTP POST JSON request \'http://localhost/bc-callback\'", ((string)(null)), table219, "And ");
#line hidden
#line 289
 testRunner.And("polls until notification is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 290
 testRunner.And("extract parameter \'auth_req_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table220.AddRow(new string[] {
                            "grant_type",
                            "urn:openid:params:grant-type:ciba"});
                table220.AddRow(new string[] {
                            "client_id",
                            "fiftyTwoClient"});
                table220.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table220.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
#line 292
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table220, "And ");
#line hidden
#line 299
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 300
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 301
 testRunner.And("JSON exists \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:ietf:params:oauth:grant-type:uma-ticket\' grant type to get an access tok" +
            "en")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:ietf:params:oauth:grant-type:uma-ticket\' grant type to get an access tok" +
            "en")]
        public void UseUrnIetfParamsOauthGrant_TypeUma_TicketGrantTypeToGetAnAccessToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:ietf:params:oauth:grant-type:uma-ticket\' grant type to get an access tok" +
                    "en", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 303
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table221.AddRow(new string[] {
                            "sub",
                            "user"});
                table221.AddRow(new string[] {
                            "email",
                            "user@hotmail.fr"});
#line 304
 testRunner.Given("build JWS id_token_hint and sign with the key \'keyid\'", ((string)(null)), table221, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table222.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table222.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table222.AddRow(new string[] {
                            "scope",
                            "uma_protection"});
                table222.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 309
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table222, "When ");
#line hidden
#line 316
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 317
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table223.AddRow(new string[] {
                            "resource_scopes",
                            "[scope1,scope2]"});
                table223.AddRow(new string[] {
                            "subject",
                            "user1"});
                table223.AddRow(new string[] {
                            "icon_uri",
                            "icon"});
                table223.AddRow(new string[] {
                            "name#fr",
                            "nom"});
                table223.AddRow(new string[] {
                            "name#en",
                            "name"});
                table223.AddRow(new string[] {
                            "description#fr",
                            "descriptionFR"});
                table223.AddRow(new string[] {
                            "description#en",
                            "descriptionEN"});
                table223.AddRow(new string[] {
                            "type",
                            "type"});
                table223.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 319
 testRunner.And("execute HTTP POST JSON request \'http://localhost/rreguri\'", ((string)(null)), table223, "And ");
#line hidden
#line 331
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 332
 testRunner.And("extract parameter \'_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table224.AddRow(new string[] {
                            "permissions",
                            "[ { \"claims\": [ { \"name\": \"sub\", \"value\": \"user\" }, { \"name\": \"email\", \"value\": \"" +
                                "user@hotmail.com\" } ], \"scopes\": [ \"scope1\", \"scope2\" ] } ]"});
                table224.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 334
 testRunner.And("execute HTTP PUT JSON request \'http://localhost/rreguri/$_id$/permissions\'", ((string)(null)), table224, "And ");
#line hidden
                TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table225.AddRow(new string[] {
                            "resource_id",
                            "$_id$"});
                table225.AddRow(new string[] {
                            "resource_scopes",
                            "[scope1,scope2]"});
                table225.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 339
 testRunner.And("execute HTTP POST JSON request \'http://localhost/perm\'", ((string)(null)), table225, "And ");
#line hidden
#line 345
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 346
 testRunner.And("extract parameter \'ticket\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table226.AddRow(new string[] {
                            "client_id",
                            "fiftyThreeClient"});
                table226.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table226.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:uma-ticket"});
                table226.AddRow(new string[] {
                            "ticket",
                            "$ticket$"});
                table226.AddRow(new string[] {
                            "claim_token",
                            "$id_token_hint$"});
                table226.AddRow(new string[] {
                            "claim_token_format",
                            "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"});
                table226.AddRow(new string[] {
                            "scope",
                            "scope1 scope2"});
#line 348
 testRunner.And("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table226, "And ");
#line hidden
#line 358
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 359
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 361
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 362
 testRunner.And("JSON exists \'access_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 363
 testRunner.And("JSON exists \'refresh_token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 364
 testRunner.And("access_token has permission to access to the resource id \'$_id$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 365
 testRunner.And("access_token has permission to access to the scope \'scope1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 366
 testRunner.And("access_token has permission to access to the scope \'scope2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (POLL" +
            " mode) with authorization_details")]
        [Xunit.TraitAttribute("FeatureTitle", "HappyFlows")]
        [Xunit.TraitAttribute("Description", "Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (POLL" +
            " mode) with authorization_details")]
        public void UseUrnOpenidParamsGrant_TypeCibaGrantTypeToGetAnIdentityTokenPOLLModeWithAuthorization_Details()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use \'urn:openid:params:grant-type:ciba\' grant type to get an identity token (POLL" +
                    " mode) with authorization_details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 368
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 369
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table227.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table227.AddRow(new string[] {
                            "client_id",
                            "fourteenClient"});
                table227.AddRow(new string[] {
                            "state",
                            "state"});
                table227.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table227.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table227.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table227.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 371
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table227, "When ");
#line hidden
#line 381
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table228.AddRow(new string[] {
                            "client_id",
                            "fortyNineClient"});
                table228.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table228.AddRow(new string[] {
                            "login_hint",
                            "user"});
                table228.AddRow(new string[] {
                            "user_code",
                            "password"});
                table228.AddRow(new string[] {
                            "authorization_details",
                            "{ \"type\" : \"secondDetails\", \"locations\": [ \"https://cal.example.com\" ], \"actions\"" +
                                ": [ \"read\" ] }"});
#line 383
 testRunner.And("execute HTTP POST request \'https://localhost:8080/bc-authorize\'", ((string)(null)), table228, "And ");
#line hidden
#line 391
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 392
 testRunner.And("extract parameter \'auth_req_id\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table229.AddRow(new string[] {
                            "Authorization",
                            "Bearer $id_token$"});
                table229.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
                table229.AddRow(new string[] {
                            "action",
                            "0"});
#line 394
 testRunner.And("execute HTTP POST JSON request \'http://localhost/bc-callback\'", ((string)(null)), table229, "And ");
#line hidden
                TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table230.AddRow(new string[] {
                            "grant_type",
                            "urn:openid:params:grant-type:ciba"});
                table230.AddRow(new string[] {
                            "client_id",
                            "fortyNineClient"});
                table230.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table230.AddRow(new string[] {
                            "auth_req_id",
                            "$auth_req_id$"});
#line 400
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table230, "And ");
#line hidden
#line 407
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 408
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 409
 testRunner.And("extract payload from JWT \'$access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 411
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 412
 testRunner.And("JWT has authorization_details type \'secondDetails\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 413
 testRunner.And("JWT has authorization_details action \'read\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                HappyFlowsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                HappyFlowsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
