// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.IdServer.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class IdTokenSignatureAndOrEncryptionFeature : object, Xunit.IClassFixture<IdTokenSignatureAndOrEncryptionFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "IdTokenSignatureAndOrEncryption.feature"
#line hidden
        
        public IdTokenSignatureAndOrEncryptionFeature(IdTokenSignatureAndOrEncryptionFeature.FixtureData fixtureData, SimpleIdServer_IdServer_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "IdTokenSignatureAndOrEncryption", "\tExecute different scenarios to sign and/or encrypt id_token", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'none\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'none\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToNone()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'none\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table366 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table366.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table366.AddRow(new string[] {
                            "client_id",
                            "fifteenClient"});
                table366.AddRow(new string[] {
                            "state",
                            "state"});
                table366.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table366.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table366.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table366.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table366.AddRow(new string[] {
                            "display",
                            "popup"});
#line 6
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table366, "When ");
#line hidden
#line 17
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.Then("JWT alg = \'none\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'ES256\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'ES256\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToES256()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'ES256\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table367 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table367.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table367.AddRow(new string[] {
                            "client_id",
                            "sixteenClient"});
                table367.AddRow(new string[] {
                            "state",
                            "state"});
                table367.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table367.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table367.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table367.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table367.AddRow(new string[] {
                            "display",
                            "popup"});
#line 33
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table367, "When ");
#line hidden
#line 44
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.Then("JWT alg = \'ES256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'ES384\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'ES384\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToES384()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'ES384\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 59
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table368 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table368.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table368.AddRow(new string[] {
                            "client_id",
                            "seventeenClient"});
                table368.AddRow(new string[] {
                            "state",
                            "state"});
                table368.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table368.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table368.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table368.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table368.AddRow(new string[] {
                            "display",
                            "popup"});
#line 60
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table368, "When ");
#line hidden
#line 71
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.Then("JWT alg = \'ES384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'ES512\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'ES512\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToES512()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'ES512\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 86
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table369 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table369.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table369.AddRow(new string[] {
                            "client_id",
                            "eighteenClient"});
                table369.AddRow(new string[] {
                            "state",
                            "state"});
                table369.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table369.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table369.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table369.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table369.AddRow(new string[] {
                            "display",
                            "popup"});
#line 87
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table369, "When ");
#line hidden
#line 98
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
 testRunner.Then("JWT alg = \'ES512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 107
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 110
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'HS256\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'HS256\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToHS256()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'HS256\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 113
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table370 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table370.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table370.AddRow(new string[] {
                            "client_id",
                            "nineteenClient"});
                table370.AddRow(new string[] {
                            "state",
                            "state"});
                table370.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table370.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table370.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table370.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table370.AddRow(new string[] {
                            "display",
                            "popup"});
#line 114
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table370, "When ");
#line hidden
#line 125
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
 testRunner.Then("JWT alg = \'HS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 129
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 131
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 133
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 134
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 135
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 136
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 137
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'HS384\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'HS384\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToHS384()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'HS384\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 139
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 140
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table371 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table371.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table371.AddRow(new string[] {
                            "client_id",
                            "twentyClient"});
                table371.AddRow(new string[] {
                            "state",
                            "state"});
                table371.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table371.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table371.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table371.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table371.AddRow(new string[] {
                            "display",
                            "popup"});
#line 141
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table371, "When ");
#line hidden
#line 152
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
 testRunner.Then("JWT alg = \'HS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 156
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 157
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 158
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 160
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 161
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 162
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 163
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 164
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'HS512\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'HS512\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToHS512()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'HS512\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 167
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table372 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table372.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table372.AddRow(new string[] {
                            "client_id",
                            "twentyOneClient"});
                table372.AddRow(new string[] {
                            "state",
                            "state"});
                table372.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table372.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table372.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table372.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table372.AddRow(new string[] {
                            "display",
                            "popup"});
#line 168
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table372, "When ");
#line hidden
#line 179
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 180
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 182
 testRunner.Then("JWT alg = \'HS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 183
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 184
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 185
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 186
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 187
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 188
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 189
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 190
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'RS256\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'RS256\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToRS256()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'RS256\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 193
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 194
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table373 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table373.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table373.AddRow(new string[] {
                            "client_id",
                            "twentyTwoClient"});
                table373.AddRow(new string[] {
                            "state",
                            "state"});
                table373.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table373.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table373.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table373.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table373.AddRow(new string[] {
                            "display",
                            "popup"});
#line 195
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table373, "When ");
#line hidden
#line 206
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 207
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 209
 testRunner.Then("JWT alg = \'RS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 211
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 212
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 213
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 214
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 215
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 216
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 217
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 218
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'RS384\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'RS384\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToRS384()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'RS384\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 220
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 221
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table374 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table374.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table374.AddRow(new string[] {
                            "client_id",
                            "twentyThreeClient"});
                table374.AddRow(new string[] {
                            "state",
                            "state"});
                table374.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table374.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table374.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table374.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table374.AddRow(new string[] {
                            "display",
                            "popup"});
#line 222
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table374, "When ");
#line hidden
#line 233
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 234
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 236
 testRunner.Then("JWT alg = \'RS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 237
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 238
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 239
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 240
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 241
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 242
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 243
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 244
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 245
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWS format with alg set to \'RS512\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWS format with alg set to \'RS512\'")]
        public void IdentityTokenMustBeReturnedInJWSFormatWithAlgSetToRS512()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWS format with alg set to \'RS512\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 247
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 248
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table375 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table375.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table375.AddRow(new string[] {
                            "client_id",
                            "twentyFourClient"});
                table375.AddRow(new string[] {
                            "state",
                            "state"});
                table375.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table375.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table375.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table375.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table375.AddRow(new string[] {
                            "display",
                            "popup"});
#line 249
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table375, "When ");
#line hidden
#line 260
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 261
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 263
 testRunner.Then("JWT alg = \'RS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 264
 testRunner.Then("JWT contains \'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 265
 testRunner.Then("JWT contains \'iat\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 266
 testRunner.Then("JWT contains \'exp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 267
 testRunner.Then("JWT contains \'azp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 268
 testRunner.Then("JWT contains \'aud\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 269
 testRunner.Then("JWT has \'sub\'=\'user\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 270
 testRunner.Then("JWT has \'email\'=\'email@outlook.fr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 271
 testRunner.Then("JWT has \'role\'=\'role1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 272
 testRunner.Then("JWT has \'role\'=\'role2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
            "t to \'A128CBC-HS256\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
            "t to \'A128CBC-HS256\'")]
        public void IdentityTokenMustBeReturnedInJWEFormatWithAlgSetToRSA1_5AndEncSetToA128CBC_HS256()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
                    "t to \'A128CBC-HS256\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 274
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 275
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table376 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table376.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table376.AddRow(new string[] {
                            "client_id",
                            "twentyFiveClient"});
                table376.AddRow(new string[] {
                            "state",
                            "state"});
                table376.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table376.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table376.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table376.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table376.AddRow(new string[] {
                            "display",
                            "popup"});
#line 276
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table376, "When ");
#line hidden
#line 287
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 288
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 290
 testRunner.Then("JWT is encrypted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 291
 testRunner.Then("JWT alg = \'RSA1_5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 292
 testRunner.Then("JWT enc = \'A128CBC-HS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
            "t to \'A192CBC-HS384\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
            "t to \'A192CBC-HS384\'")]
        public void IdentityTokenMustBeReturnedInJWEFormatWithAlgSetToRSA1_5AndEncSetToA192CBC_HS384()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
                    "t to \'A192CBC-HS384\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 294
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 295
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table377 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table377.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table377.AddRow(new string[] {
                            "client_id",
                            "twentySixClient"});
                table377.AddRow(new string[] {
                            "state",
                            "state"});
                table377.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table377.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table377.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table377.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table377.AddRow(new string[] {
                            "display",
                            "popup"});
#line 296
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table377, "When ");
#line hidden
#line 307
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 308
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 310
 testRunner.Then("JWT is encrypted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 311
 testRunner.Then("JWT alg = \'RSA1_5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 312
 testRunner.Then("JWT enc = \'A192CBC-HS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
            "t to \'A256CBC-HS512\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
            "t to \'A256CBC-HS512\'")]
        public void IdentityTokenMustBeReturnedInJWEFormatWithAlgSetToRSA1_5AndEncSetToA256CBC_HS512()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWE format with alg set to \'RSA1_5\' and enc se" +
                    "t to \'A256CBC-HS512\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 314
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 315
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table378 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table378.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table378.AddRow(new string[] {
                            "client_id",
                            "twentySevenClient"});
                table378.AddRow(new string[] {
                            "state",
                            "state"});
                table378.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table378.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table378.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table378.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table378.AddRow(new string[] {
                            "display",
                            "popup"});
#line 316
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table378, "When ");
#line hidden
#line 327
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 328
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 330
 testRunner.Then("JWT is encrypted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 331
 testRunner.Then("JWT alg = \'RSA1_5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 332
 testRunner.Then("JWT enc = \'A256CBC-HS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
            "set to \'A128CBC-HS256\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
            "set to \'A128CBC-HS256\'")]
        public void IdentityTokenMustBeReturnedInJWEFormatWithAlgSetToRSA_OAEPAndEncSetToA128CBC_HS256()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
                    "set to \'A128CBC-HS256\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 334
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 335
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table379 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table379.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table379.AddRow(new string[] {
                            "client_id",
                            "twentyEightClient"});
                table379.AddRow(new string[] {
                            "state",
                            "state"});
                table379.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table379.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table379.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table379.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table379.AddRow(new string[] {
                            "display",
                            "popup"});
#line 336
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table379, "When ");
#line hidden
#line 347
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 348
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 350
 testRunner.Then("JWT is encrypted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 351
 testRunner.Then("JWT alg = \'RSA-OAEP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 352
 testRunner.Then("JWT enc = \'A128CBC-HS256\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
            "set to \'A192CBC-HS384\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
            "set to \'A192CBC-HS384\'")]
        public void IdentityTokenMustBeReturnedInJWEFormatWithAlgSetToRSA_OAEPAndEncSetToA192CBC_HS384()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
                    "set to \'A192CBC-HS384\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 354
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 355
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table380 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table380.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table380.AddRow(new string[] {
                            "client_id",
                            "twentyNineClient"});
                table380.AddRow(new string[] {
                            "state",
                            "state"});
                table380.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table380.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table380.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table380.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table380.AddRow(new string[] {
                            "display",
                            "popup"});
#line 356
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table380, "When ");
#line hidden
#line 367
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 368
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 370
 testRunner.Then("JWT is encrypted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 371
 testRunner.Then("JWT alg = \'RSA-OAEP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 372
 testRunner.Then("JWT enc = \'A192CBC-HS384\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
            "set to \'A256CBC-HS512\'")]
        [Xunit.TraitAttribute("FeatureTitle", "IdTokenSignatureAndOrEncryption")]
        [Xunit.TraitAttribute("Description", "Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
            "set to \'A256CBC-HS512\'")]
        public void IdentityTokenMustBeReturnedInJWEFormatWithAlgSetToRSA_OAEPAndEncSetToA256CBC_HS512()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Token must be returned in JWE format with alg set to \'RSA-OAEP\' and enc " +
                    "set to \'A256CBC-HS512\'", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 374
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 375
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table381 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table381.AddRow(new string[] {
                            "response_type",
                            "id_token"});
                table381.AddRow(new string[] {
                            "client_id",
                            "thirtyClient"});
                table381.AddRow(new string[] {
                            "state",
                            "state"});
                table381.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table381.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table381.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table381.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table381.AddRow(new string[] {
                            "display",
                            "popup"});
#line 376
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table381, "When ");
#line hidden
#line 387
 testRunner.And("extract parameter \'id_token\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 388
 testRunner.And("extract payload from JWT \'$id_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 390
 testRunner.Then("JWT is encrypted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 391
 testRunner.Then("JWT alg = \'RSA-OAEP\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 392
 testRunner.Then("JWT enc = \'A256CBC-HS512\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                IdTokenSignatureAndOrEncryptionFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                IdTokenSignatureAndOrEncryptionFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
