// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.IdServer.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GrantsFeature : object, Xunit.IClassFixture<GrantsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Grants.feature"
#line hidden
        
        public GrantsFeature(GrantsFeature.FixtureData fixtureData, SimpleIdServer_IdServer_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Grants", "\tCheck happy flow implementation : https://bitbucket.org/openid/fapi/src/master/f" +
                    "api-grant-management.md", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="grant is returned when valid access token is passed")]
        [Xunit.TraitAttribute("FeatureTitle", "Grants")]
        [Xunit.TraitAttribute("Description", "grant is returned when valid access token is passed")]
        public void GrantIsReturnedWhenValidAccessTokenIsPassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("grant is returned when valid access token is passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table128.AddRow(new string[] {
                            "response_type",
                            "code"});
                table128.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table128.AddRow(new string[] {
                            "state",
                            "state"});
                table128.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table128.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table128.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table128.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table128.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table128.AddRow(new string[] {
                            "grant_management_action",
                            "create"});
                table128.AddRow(new string[] {
                            "scope",
                            "grant_management_query"});
                table128.AddRow(new string[] {
                            "authorization_details",
                            "{ \"type\" : \"secondDetails\", \"locations\": [ \"https://cal.example.com\" ], \"actions\"" +
                                ": [ \"read\" ] }"});
#line 7
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table128, "When ");
#line hidden
#line 21
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table129.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table129.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table129.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table129.AddRow(new string[] {
                            "code",
                            "$code$"});
                table129.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 23
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table129, "And ");
#line hidden
#line 31
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("extract parameter \'$.access_token\' from JSON body into \'accessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And("extract parameter \'$.grant_id\' from JSON body into \'grantId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table130.AddRow(new string[] {
                            "Authorization",
                            "Bearer $accessToken$"});
#line 35
 testRunner.And("execute HTTP GET request \'http://localhost/grants/$grantId$\'", ((string)(null)), table130, "And ");
#line hidden
#line 39
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.Then("JSON \'$.claims[0]\'=\'acr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.And("JSON \'$.scopes[0].scope\'=\'admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("JSON \'$.scopes[1].scope\'=\'calendar\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.And("JSON \'$.scopes[2].scope\'=\'grant_management_query\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.And("JSON \'$.authorization_details[0].type\'=\'secondDetails\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.And("JSON \'$.authorization_details[0].locations[0]\'=\'https://cal.example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And("JSON \'$.authorization_details[0].actions[0]\'=\'read\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="grant is returned when a valid refreshed access token is passed")]
        [Xunit.TraitAttribute("FeatureTitle", "Grants")]
        [Xunit.TraitAttribute("Description", "grant is returned when a valid refreshed access token is passed")]
        public void GrantIsReturnedWhenAValidRefreshedAccessTokenIsPassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("grant is returned when a valid refreshed access token is passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table131.AddRow(new string[] {
                            "response_type",
                            "code"});
                table131.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table131.AddRow(new string[] {
                            "state",
                            "state"});
                table131.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table131.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table131.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table131.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table131.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table131.AddRow(new string[] {
                            "grant_management_action",
                            "create"});
                table131.AddRow(new string[] {
                            "scope",
                            "grant_management_query"});
#line 52
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table131, "When ");
#line hidden
#line 65
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table132.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table132.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table132.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table132.AddRow(new string[] {
                            "code",
                            "$code$"});
                table132.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 67
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table132, "And ");
#line hidden
#line 75
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.And("extract parameter \'$.refresh_token\' from JSON body into \'refreshToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table133.AddRow(new string[] {
                            "grant_type",
                            "refresh_token"});
                table133.AddRow(new string[] {
                            "refresh_token",
                            "$refreshToken$"});
                table133.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table133.AddRow(new string[] {
                            "client_secret",
                            "password"});
#line 78
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table133, "And ");
#line hidden
#line 85
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.And("extract parameter \'$.access_token\' from JSON body into \'accessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And("extract parameter \'$.grant_id\' from JSON body into \'grantId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table134.AddRow(new string[] {
                            "Authorization",
                            "Bearer $accessToken$"});
#line 89
 testRunner.And("execute HTTP GET request \'http://localhost/grants/$grantId$\'", ((string)(null)), table134, "And ");
#line hidden
#line 93
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.Then("JSON \'$.claims[0]\'=\'acr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.And("JSON \'$.scopes[0].scope\'=\'admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.And("JSON \'$.scopes[1].scope\'=\'calendar\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="revoke a grant and check access token is revoked")]
        [Xunit.TraitAttribute("FeatureTitle", "Grants")]
        [Xunit.TraitAttribute("Description", "revoke a grant and check access token is revoked")]
        public void RevokeAGrantAndCheckAccessTokenIsRevoked()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("revoke a grant and check access token is revoked", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 100
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table135.AddRow(new string[] {
                            "response_type",
                            "code"});
                table135.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table135.AddRow(new string[] {
                            "state",
                            "state"});
                table135.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table135.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table135.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table135.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table135.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table135.AddRow(new string[] {
                            "grant_management_action",
                            "create"});
                table135.AddRow(new string[] {
                            "scope",
                            "grant_management_query grant_management_revoke"});
#line 102
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table135, "When ");
#line hidden
#line 115
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table136.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table136.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table136.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table136.AddRow(new string[] {
                            "code",
                            "$code$"});
                table136.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 117
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table136, "And ");
#line hidden
#line 125
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
 testRunner.And("extract parameter \'$.access_token\' from JSON body into \'accessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
 testRunner.And("extract parameter \'$.grant_id\' from JSON body into \'grantId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table137.AddRow(new string[] {
                            "Authorization",
                            "Bearer $accessToken$"});
#line 129
 testRunner.And("execute HTTP DELETE request \'http://localhost/grants/$grantId$\'", ((string)(null)), table137, "And ");
#line hidden
                TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table138.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table138.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table138.AddRow(new string[] {
                            "token",
                            "$accessToken$"});
#line 133
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token_info\'", ((string)(null)), table138, "And ");
#line hidden
#line 139
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
 testRunner.And("JSON \'$.active\'=\'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="merge the permissions consented by the user in the actual request with those alre" +
            "ady exist within the grant")]
        [Xunit.TraitAttribute("FeatureTitle", "Grants")]
        [Xunit.TraitAttribute("Description", "merge the permissions consented by the user in the actual request with those alre" +
            "ady exist within the grant")]
        public void MergeThePermissionsConsentedByTheUserInTheActualRequestWithThoseAlreadyExistWithinTheGrant()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("merge the permissions consented by the user in the actual request with those alre" +
                    "ady exist within the grant", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 145
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table139.AddRow(new string[] {
                            "response_type",
                            "code"});
                table139.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table139.AddRow(new string[] {
                            "state",
                            "state"});
                table139.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table139.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table139.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table139.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table139.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table139.AddRow(new string[] {
                            "grant_management_action",
                            "create"});
                table139.AddRow(new string[] {
                            "scope",
                            "grant_management_query"});
#line 147
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table139, "When ");
#line hidden
#line 160
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table140.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table140.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table140.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table140.AddRow(new string[] {
                            "code",
                            "$code$"});
                table140.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 162
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table140, "And ");
#line hidden
#line 170
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
 testRunner.And("extract parameter \'$.grant_id\' from JSON body into \'grantId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table141.AddRow(new string[] {
                            "response_type",
                            "code"});
                table141.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table141.AddRow(new string[] {
                            "state",
                            "state"});
                table141.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table141.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table141.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table141.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"iss\": { \"essential\" : false } } }"});
                table141.AddRow(new string[] {
                            "resource",
                            "https://contacts.example.com"});
                table141.AddRow(new string[] {
                            "grant_management_action",
                            "merge"});
                table141.AddRow(new string[] {
                            "scope",
                            "grant_management_revoke grant_management_query"});
                table141.AddRow(new string[] {
                            "grant_id",
                            "$grantId$"});
#line 173
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table141, "And ");
#line hidden
#line 187
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table142.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table142.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table142.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table142.AddRow(new string[] {
                            "code",
                            "$code$"});
                table142.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 189
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table142, "And ");
#line hidden
#line 197
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 198
 testRunner.And("extract parameter \'$.access_token\' from JSON body into \'accessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table143.AddRow(new string[] {
                            "Authorization",
                            "Bearer $accessToken$"});
#line 200
 testRunner.And("execute HTTP GET request \'http://localhost/grants/$grantId$\'", ((string)(null)), table143, "And ");
#line hidden
#line 204
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
 testRunner.Then("JSON \'$.claims[0]\'=\'acr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 207
 testRunner.And("JSON \'$.claims[1]\'=\'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 208
 testRunner.And("JSON \'$.scopes[0].scope\'=\'admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 209
 testRunner.And("JSON \'$.scopes[0].resources[0]\'=\'https://cal.example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 210
 testRunner.And("JSON \'$.scopes[0].resources[1]\'=\'https://contacts.example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 211
 testRunner.And("JSON \'$.scopes[1].scope\'=\'calendar\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 212
 testRunner.And("JSON \'$.scopes[1].resources[0]\'=\'https://cal.example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 213
 testRunner.And("JSON \'$.scopes[1].resources[1]\'=\'https://contacts.example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 214
 testRunner.And("JSON \'$.scopes[2].scope\'=\'grant_management_query\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 215
 testRunner.And("JSON \'$.scopes[3].scope\'=\'grant_management_revoke\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="change the grant to be ONLY the permissions requested by the client and consented" +
            " by the user in the actual request")]
        [Xunit.TraitAttribute("FeatureTitle", "Grants")]
        [Xunit.TraitAttribute("Description", "change the grant to be ONLY the permissions requested by the client and consented" +
            " by the user in the actual request")]
        public void ChangeTheGrantToBeONLYThePermissionsRequestedByTheClientAndConsentedByTheUserInTheActualRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("change the grant to be ONLY the permissions requested by the client and consented" +
                    " by the user in the actual request", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 217
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 218
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table144.AddRow(new string[] {
                            "response_type",
                            "code"});
                table144.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table144.AddRow(new string[] {
                            "state",
                            "state"});
                table144.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table144.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table144.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table144.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table144.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table144.AddRow(new string[] {
                            "grant_management_action",
                            "create"});
                table144.AddRow(new string[] {
                            "scope",
                            "grant_management_revoke"});
#line 220
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table144, "When ");
#line hidden
#line 233
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table145.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table145.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table145.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table145.AddRow(new string[] {
                            "code",
                            "$code$"});
                table145.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 235
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table145, "And ");
#line hidden
#line 243
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 244
 testRunner.And("extract parameter \'$.grant_id\' from JSON body into \'grantId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table146.AddRow(new string[] {
                            "response_type",
                            "code"});
                table146.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table146.AddRow(new string[] {
                            "state",
                            "state"});
                table146.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table146.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table146.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table146.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"iss\": { \"essential\" : false } } }"});
                table146.AddRow(new string[] {
                            "grant_management_action",
                            "replace"});
                table146.AddRow(new string[] {
                            "scope",
                            "grant_management_query"});
                table146.AddRow(new string[] {
                            "grant_id",
                            "$grantId$"});
#line 246
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table146, "And ");
#line hidden
#line 259
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table147.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table147.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table147.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table147.AddRow(new string[] {
                            "code",
                            "$code$"});
                table147.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 261
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table147, "And ");
#line hidden
#line 269
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 270
 testRunner.And("extract parameter \'$.access_token\' from JSON body into \'accessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table148.AddRow(new string[] {
                            "Authorization",
                            "Bearer $accessToken$"});
#line 272
 testRunner.And("execute HTTP GET request \'http://localhost/grants/$grantId$\'", ((string)(null)), table148, "And ");
#line hidden
#line 276
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 278
 testRunner.Then("JSON \'$.claims[0]\'=\'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 279
 testRunner.Then("JSON \'$.scopes[0].scope\'=\'grant_management_query\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GrantsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GrantsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
