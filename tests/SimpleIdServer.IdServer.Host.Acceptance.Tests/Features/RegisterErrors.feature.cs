// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.IdServer.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RegisterErrorsFeature : object, Xunit.IClassFixture<RegisterErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RegisterErrors.feature"
#line hidden
        
        public RegisterErrorsFeature(RegisterErrorsFeature.FixtureData fixtureData, SimpleIdServer_IdServer_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "RegisterErrors", "\tCheck errors returned during client registration", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when trying to get a client and authorization header is missing" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when trying to get a client and authorization header is missing" +
            "")]
        public void ErrorIsReturnedWhenTryingToGetAClientAndAuthorizationHeaderIsMissing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when trying to get a client and authorization header is missing" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table397 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
#line 5
 testRunner.When("execute HTTP GET request \'https://localhost:8080/register/clientid\'", ((string)(null)), table397, "When ");
#line hidden
#line 8
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when authorization header is missing")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when authorization header is missing")]
        public void ErrorIsReturnedWhenAuthorizationHeaderIsMissing()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when authorization header is missing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table398 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
#line 11
 testRunner.When("execute HTTP GET request \'https://localhost:8080/register/clientid\'", ((string)(null)), table398, "When ");
#line hidden
#line 14
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when access token is invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when access token is invalid")]
        public void ErrorIsReturnedWhenAccessTokenIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when access token is invalid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table399 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table399.AddRow(new string[] {
                            "Authorization",
                            "accesstoken"});
#line 17
 testRunner.When("execute HTTP GET request \'https://localhost:8080/register/clientid\'", ((string)(null)), table399, "When ");
#line hidden
#line 21
 testRunner.Then("HTTP status code equals to \'401\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="application_type must be correct")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "application_type must be correct")]
        public void Application_TypeMustBeCorrect()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("application_type must be correct", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table400 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table400.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table400.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table400.AddRow(new string[] {
                            "scope",
                            "register"});
                table400.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 24
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table400, "When ");
#line hidden
#line 31
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table401 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table401.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
                table401.AddRow(new string[] {
                            "application_type",
                            "unknown"});
#line 34
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table401, "And ");
#line hidden
#line 39
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.Then("JSON \'error_description\'=\'application type is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="sectore_identifier_uri must be correct")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "sectore_identifier_uri must be correct")]
        public void Sectore_Identifier_UriMustBeCorrect()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("sectore_identifier_uri must be correct", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table402 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table402.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table402.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table402.AddRow(new string[] {
                            "scope",
                            "register"});
                table402.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 45
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table402, "When ");
#line hidden
#line 52
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table403 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table403.AddRow(new string[] {
                            "sector_identifier_uri",
                            "unknown"});
                table403.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 55
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table403, "And ");
#line hidden
#line 60
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
 testRunner.Then("JSON \'error_description\'=\'sector_identifier_uri is not a valid URI\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="sectore_identifier_uri must contain HTTPS scheme")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "sectore_identifier_uri must contain HTTPS scheme")]
        public void Sectore_Identifier_UriMustContainHTTPSScheme()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("sectore_identifier_uri must contain HTTPS scheme", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table404 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table404.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table404.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table404.AddRow(new string[] {
                            "scope",
                            "register"});
                table404.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 66
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table404, "When ");
#line hidden
#line 73
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table405 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table405.AddRow(new string[] {
                            "sector_identifier_uri",
                            "http://localhost"});
                table405.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 76
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table405, "And ");
#line hidden
#line 81
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
 testRunner.Then("JSON \'error_description\'=\'sector_identifier_uri doesn\'t contain https scheme\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="initiate_login_uri must be correct")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "initiate_login_uri must be correct")]
        public void Initiate_Login_UriMustBeCorrect()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("initiate_login_uri must be correct", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table406 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table406.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table406.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table406.AddRow(new string[] {
                            "scope",
                            "register"});
                table406.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 87
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table406, "When ");
#line hidden
#line 94
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table407 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table407.AddRow(new string[] {
                            "initiate_login_uri",
                            "unknown"});
                table407.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 97
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table407, "And ");
#line hidden
#line 102
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
 testRunner.Then("JSON \'error_description\'=\'initiate_login_uri is not a valid URI\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="initiate_login_uri must contains HTTPS scheme")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "initiate_login_uri must contains HTTPS scheme")]
        public void Initiate_Login_UriMustContainsHTTPSScheme()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("initiate_login_uri must contains HTTPS scheme", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 107
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table408 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table408.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table408.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table408.AddRow(new string[] {
                            "scope",
                            "register"});
                table408.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 108
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table408, "When ");
#line hidden
#line 115
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table409 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table409.AddRow(new string[] {
                            "initiate_login_uri",
                            "http://localhost"});
                table409.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 118
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table409, "And ");
#line hidden
#line 123
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
 testRunner.Then("JSON \'error_description\'=\'initiate_login_uri doesn\'t contain https scheme\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="subject_type must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "subject_type must be supported")]
        public void Subject_TypeMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("subject_type must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 128
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table410 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table410.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table410.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table410.AddRow(new string[] {
                            "scope",
                            "register"});
                table410.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 129
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table410, "When ");
#line hidden
#line 136
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table411 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table411.AddRow(new string[] {
                            "subject_type",
                            "unknow"});
                table411.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 139
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table411, "And ");
#line hidden
#line 144
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
 testRunner.Then("JSON \'error_description\'=\'subject_type is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="id_token_signed_response_alg must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "id_token_signed_response_alg must be supported")]
        public void Id_Token_Signed_Response_AlgMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("id_token_signed_response_alg must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 149
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table412 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table412.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table412.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table412.AddRow(new string[] {
                            "scope",
                            "register"});
                table412.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 150
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table412, "When ");
#line hidden
#line 157
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 158
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table413 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table413.AddRow(new string[] {
                            "id_token_signed_response_alg",
                            "unknow"});
                table413.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 160
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table413, "And ");
#line hidden
#line 165
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 168
 testRunner.Then("JSON \'error_description\'=\'id_token_signed_response_alg is not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="id_token_encrypted_response_alg must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "id_token_encrypted_response_alg must be supported")]
        public void Id_Token_Encrypted_Response_AlgMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("id_token_encrypted_response_alg must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 170
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table414 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table414.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table414.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table414.AddRow(new string[] {
                            "scope",
                            "register"});
                table414.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 171
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table414, "When ");
#line hidden
#line 178
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table415 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table415.AddRow(new string[] {
                            "id_token_encrypted_response_alg",
                            "unknown"});
                table415.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 181
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table415, "And ");
#line hidden
#line 186
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 188
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 189
 testRunner.Then("JSON \'error_description\'=\'id_token_encrypted_response_alg is not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="id_token_encrypted_response_enc must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "id_token_encrypted_response_enc must be supported")]
        public void Id_Token_Encrypted_Response_EncMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("id_token_encrypted_response_enc must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 191
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table416 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table416.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table416.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table416.AddRow(new string[] {
                            "scope",
                            "register"});
                table416.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 192
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table416, "When ");
#line hidden
#line 199
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table417 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table417.AddRow(new string[] {
                            "id_token_encrypted_response_enc",
                            "unknown"});
                table417.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 202
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table417, "And ");
#line hidden
#line 207
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 209
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
 testRunner.Then("JSON \'error_description\'=\'id_token_encrypted_response_enc is not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="id_token_encrypted_response_alg is required when id_token_encrypted_response_enc " +
            "is specified")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "id_token_encrypted_response_alg is required when id_token_encrypted_response_enc " +
            "is specified")]
        public void Id_Token_Encrypted_Response_AlgIsRequiredWhenId_Token_Encrypted_Response_EncIsSpecified()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("id_token_encrypted_response_alg is required when id_token_encrypted_response_enc " +
                    "is specified", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 212
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table418 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table418.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table418.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table418.AddRow(new string[] {
                            "scope",
                            "register"});
                table418.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 213
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table418, "When ");
#line hidden
#line 220
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 221
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table419 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table419.AddRow(new string[] {
                            "id_token_encrypted_response_enc",
                            "A128CBC-HS256"});
                table419.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 223
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table419, "And ");
#line hidden
#line 228
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 230
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 231
 testRunner.Then("JSON \'error_description\'=\'missing parameter id_token_encrypted_response_alg\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="userinfo_signed_response_alg must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "userinfo_signed_response_alg must be supported")]
        public void Userinfo_Signed_Response_AlgMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("userinfo_signed_response_alg must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 233
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table420 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table420.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table420.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table420.AddRow(new string[] {
                            "scope",
                            "register"});
                table420.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 234
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table420, "When ");
#line hidden
#line 241
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 242
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table421 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table421.AddRow(new string[] {
                            "userinfo_signed_response_alg",
                            "unknown"});
                table421.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 244
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table421, "And ");
#line hidden
#line 249
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 251
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 252
 testRunner.Then("JSON \'error_description\'=\'userinfo_signed_response_alg is not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="userinfo_encrypted_response_alg must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "userinfo_encrypted_response_alg must be supported")]
        public void Userinfo_Encrypted_Response_AlgMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("userinfo_encrypted_response_alg must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 254
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table422 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table422.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table422.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table422.AddRow(new string[] {
                            "scope",
                            "register"});
                table422.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 255
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table422, "When ");
#line hidden
#line 262
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 263
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table423 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table423.AddRow(new string[] {
                            "userinfo_encrypted_response_alg",
                            "unknown"});
                table423.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 265
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table423, "And ");
#line hidden
#line 270
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 272
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 273
 testRunner.Then("JSON \'error_description\'=\'userinfo_encrypted_response_alg is not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="userinfo_encrypted_response_enc must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "userinfo_encrypted_response_enc must be supported")]
        public void Userinfo_Encrypted_Response_EncMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("userinfo_encrypted_response_enc must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 275
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table424 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table424.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table424.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table424.AddRow(new string[] {
                            "scope",
                            "register"});
                table424.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 276
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table424, "When ");
#line hidden
#line 283
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 284
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table425 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table425.AddRow(new string[] {
                            "userinfo_encrypted_response_enc",
                            "unknown"});
                table425.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 286
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table425, "And ");
#line hidden
#line 291
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 293
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 294
 testRunner.Then("JSON \'error_description\'=\'userinfo_encrypted_response_enc is not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="userinfo_encrypted_response_alg is required when userinfo_encrypted_response_enc " +
            "is specified")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "userinfo_encrypted_response_alg is required when userinfo_encrypted_response_enc " +
            "is specified")]
        public void Userinfo_Encrypted_Response_AlgIsRequiredWhenUserinfo_Encrypted_Response_EncIsSpecified()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("userinfo_encrypted_response_alg is required when userinfo_encrypted_response_enc " +
                    "is specified", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 296
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table426 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table426.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table426.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table426.AddRow(new string[] {
                            "scope",
                            "register"});
                table426.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 297
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table426, "When ");
#line hidden
#line 304
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 305
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table427 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table427.AddRow(new string[] {
                            "userinfo_encrypted_response_enc",
                            "A128CBC-HS256"});
                table427.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 307
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table427, "And ");
#line hidden
#line 312
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 314
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 315
 testRunner.Then("JSON \'error_description\'=\'missing parameter userinfo_encrypted_response_alg\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="request_object_signing_alg must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "request_object_signing_alg must be supported")]
        public void Request_Object_Signing_AlgMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("request_object_signing_alg must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 318
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table428 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table428.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table428.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table428.AddRow(new string[] {
                            "scope",
                            "register"});
                table428.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 319
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table428, "When ");
#line hidden
#line 326
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 327
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table429 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table429.AddRow(new string[] {
                            "request_object_signing_alg",
                            "unknown"});
                table429.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 329
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table429, "And ");
#line hidden
#line 334
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 336
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 337
 testRunner.Then("JSON \'error_description\'=\'request_object_signing_alg is not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="request_object_encryption_alg must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "request_object_encryption_alg must be supported")]
        public void Request_Object_Encryption_AlgMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("request_object_encryption_alg must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 339
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table430 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table430.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table430.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table430.AddRow(new string[] {
                            "scope",
                            "register"});
                table430.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 340
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table430, "When ");
#line hidden
#line 347
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 348
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table431 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table431.AddRow(new string[] {
                            "request_object_encryption_alg",
                            "unknown"});
                table431.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 350
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table431, "And ");
#line hidden
#line 355
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 357
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 358
 testRunner.Then("JSON \'error_description\'=\'request_object_encryption_alg is not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="request_object_encryption_enc must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "request_object_encryption_enc must be supported")]
        public void Request_Object_Encryption_EncMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("request_object_encryption_enc must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 361
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table432 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table432.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table432.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table432.AddRow(new string[] {
                            "scope",
                            "register"});
                table432.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 362
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table432, "When ");
#line hidden
#line 369
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 370
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table433 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table433.AddRow(new string[] {
                            "request_object_encryption_enc",
                            "unknown"});
                table433.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 372
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table433, "And ");
#line hidden
#line 377
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 379
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 380
 testRunner.Then("JSON \'error_description\'=\'request_object_encryption_enc is not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="request_object_encryption_alg is required when request_object_encryption_enc is s" +
            "pecified")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "request_object_encryption_alg is required when request_object_encryption_enc is s" +
            "pecified")]
        public void Request_Object_Encryption_AlgIsRequiredWhenRequest_Object_Encryption_EncIsSpecified()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("request_object_encryption_alg is required when request_object_encryption_enc is s" +
                    "pecified", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 383
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table434 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table434.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table434.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table434.AddRow(new string[] {
                            "scope",
                            "register"});
                table434.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 384
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table434, "When ");
#line hidden
#line 391
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 392
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table435 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table435.AddRow(new string[] {
                            "request_object_encryption_enc",
                            "A128CBC-HS256"});
                table435.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 394
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table435, "And ");
#line hidden
#line 399
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 401
 testRunner.Then("JSON \'error\'=\'invalid_client_metadata\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 402
 testRunner.Then("JSON \'error_description\'=\'missing parameter request_object_encryption_alg\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="web client must have a valid redirect_uri")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "web client must have a valid redirect_uri")]
        public void WebClientMustHaveAValidRedirect_Uri()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("web client must have a valid redirect_uri", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 404
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table436 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table436.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table436.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table436.AddRow(new string[] {
                            "scope",
                            "register"});
                table436.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 405
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table436, "When ");
#line hidden
#line 412
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 413
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table437 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table437.AddRow(new string[] {
                            "redirect_uris",
                            "[invalid]"});
                table437.AddRow(new string[] {
                            "application_type",
                            "web"});
                table437.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 415
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table437, "And ");
#line hidden
#line 421
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 423
 testRunner.Then("JSON \'error\'=\'invalid_redirect_uri\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 424
 testRunner.Then("JSON \'error_description\'=\'redirect_uri invalid is not correct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="redirect_uri cannot contains fragment")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "redirect_uri cannot contains fragment")]
        public void Redirect_UriCannotContainsFragment()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("redirect_uri cannot contains fragment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 426
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table438 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table438.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table438.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table438.AddRow(new string[] {
                            "scope",
                            "register"});
                table438.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 427
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table438, "When ");
#line hidden
#line 434
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 435
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table439 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table439.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost#foobar]"});
                table439.AddRow(new string[] {
                            "application_type",
                            "web"});
                table439.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 437
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table439, "And ");
#line hidden
#line 443
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 445
 testRunner.Then("JSON \'error\'=\'invalid_redirect_uri\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 446
 testRunner.Then("JSON \'error_description\'=\'the redirect_uri cannot contains fragment\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="native client must have a valid redirect_uri")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "native client must have a valid redirect_uri")]
        public void NativeClientMustHaveAValidRedirect_Uri()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("native client must have a valid redirect_uri", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 448
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table440 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table440.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table440.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table440.AddRow(new string[] {
                            "scope",
                            "register"});
                table440.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 449
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table440, "When ");
#line hidden
#line 456
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 457
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table441 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table441.AddRow(new string[] {
                            "redirect_uris",
                            "[invalid]"});
                table441.AddRow(new string[] {
                            "application_type",
                            "native"});
                table441.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 459
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table441, "And ");
#line hidden
#line 465
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 467
 testRunner.Then("JSON \'error\'=\'invalid_redirect_uri\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 468
 testRunner.Then("JSON \'error_description\'=\'redirect_uri invalid is not correct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="redirect_uri must have https scheme")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "redirect_uri must have https scheme")]
        public void Redirect_UriMustHaveHttpsScheme()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("redirect_uri must have https scheme", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 470
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table442 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table442.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table442.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table442.AddRow(new string[] {
                            "scope",
                            "register"});
                table442.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 471
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table442, "When ");
#line hidden
#line 478
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 479
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table443 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table443.AddRow(new string[] {
                            "redirect_uris",
                            "[http://localhost]"});
                table443.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 481
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table443, "And ");
#line hidden
#line 486
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 488
 testRunner.Then("JSON \'error\'=\'invalid_redirect_uri\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 489
 testRunner.Then("JSON \'error_description\'=\'redirect_uri does not contain https scheme\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="web client cannot have redirect_uri pointing to localhost")]
        [Xunit.TraitAttribute("FeatureTitle", "RegisterErrors")]
        [Xunit.TraitAttribute("Description", "web client cannot have redirect_uri pointing to localhost")]
        public void WebClientCannotHaveRedirect_UriPointingToLocalhost()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("web client cannot have redirect_uri pointing to localhost", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 491
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table444 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table444.AddRow(new string[] {
                            "client_id",
                            "fiftySevenClient"});
                table444.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table444.AddRow(new string[] {
                            "scope",
                            "register"});
                table444.AddRow(new string[] {
                            "grant_type",
                            "client_credentials"});
#line 492
 testRunner.When("execute HTTP POST request \'http://localhost/token\'", ((string)(null)), table444, "When ");
#line hidden
#line 499
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 500
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table445 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table445.AddRow(new string[] {
                            "redirect_uris",
                            "[https://localhost]"});
                table445.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
#line 502
 testRunner.And("execute HTTP POST JSON request \'http://localhost/register\'", ((string)(null)), table445, "And ");
#line hidden
#line 507
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 509
 testRunner.Then("JSON \'error\'=\'invalid_redirect_uri\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 510
 testRunner.Then("JSON \'error_description\'=\'redirect_uri must not contain localhost\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RegisterErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RegisterErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
