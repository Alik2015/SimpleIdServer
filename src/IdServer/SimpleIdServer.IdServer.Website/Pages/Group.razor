@page "/groups/{id}/{action}"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using Microsoft.EntityFrameworkCore;
@using SimpleIdServer.IdServer.Store;
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.GroupStore;
@using SimpleIdServer.IdServer.Website.Stores.RealmStore;
@inject IDispatcher dispatcher
@inject DialogService dialogService
@inject NavigationManager navigationManager
@inject NotificationService notificationService
@inject IGroupRepository groupRepository
@inject IState<GroupState> groupState

@if(groupState.Value.IsLoading)
{
    <RadzenText class="mt-3 mb-3" Text="Wait..." TextStyle="TextStyle.DisplayH6" />
}
else
{
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/groups" Text="Groups" />
        <RadzenBreadCrumbItem Text="Group details" />
    </RadzenBreadCrumb>

    <RadzenText class="mt-3 mb-3" Text="@groupState.Value.Group.Name" TextStyle="TextStyle.DisplayH6" />

    <RadzenSplitter>
        <RadzenSplitterPane Size="10%">
            <RadzenTree Expand="@OnExpand" Data=@groups>
                <RadzenTreeLevel TextProperty="Name" Template="@treeTemplate" />
            </RadzenTree>
        </RadzenSplitterPane>
        <RadzenSplitterPane>
            <RadzenTabs Change=@OnChange @bind-SelectedIndex="selectedIndex">
                <Tabs>
                    <RadzenTabsItem Text="Children">
                        <GroupChildren Group="@groupState.Value.Group"></GroupChildren>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Roles">
                        <GroupRoles Group="@groupState.Value.Group"></GroupRoles>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </RadzenSplitterPane>
    </RadzenSplitter>
}

@code {
    ICollection<SimpleIdServer.IdServer.Domains.Group> groups;
    RenderFragment<RadzenTreeItem> treeTemplate = (context) => builder =>
    {
        var grp = context.Value as SimpleIdServer.IdServer.Domains.Group;
        builder.OpenComponent<RadzenLink>(0);
        builder.AddAttribute(1, "Text", grp.Name);
        builder.AddAttribute(2, "Path", $"/groups/{grp.Id}/children");
        builder.CloseComponent();
    };

    Dictionary<string, int> mappingActionNameToIndex = new Dictionary<string, int>
    {
        { "children", 0 },
        { "roles", 1 }
    };

    [Parameter]
    public string id { get; set; } = null!;

    [Parameter]
    public string? action { get; set; } = null;

    int selectedIndex = 0;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if(firstRender)
        {
            SubscribeToAction<SelectRealmSuccessAction>((act) =>
            {
                navigationManager.NavigateTo("/groups");
            });
            SubscribeToAction<GetGroupSuccessAction>((act) =>
            {
                groups.Add(act.RootGroup);
            });
            SubscribeToAction<AddGroupSuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.GroupMemberAdded });
                dialogService.Close();
                StateHasChanged();
            });
            SubscribeToAction<RemoveSelectedGroupsSuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.GroupMembersRemoved });
                StateHasChanged();
            });
            SubscribeToAction<RemoveSelectedGroupRolesSuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.GroupRolesRemoved });
            });
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (string.IsNullOrWhiteSpace(id)) return;
        if (!string.IsNullOrWhiteSpace(action) && mappingActionNameToIndex.ContainsKey(action))
            selectedIndex = mappingActionNameToIndex[action];
        SubscribeToAction<GetGroupFailureAction>((act) =>
        {
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = act.ErrorMessage });
            StateHasChanged();
        });
        dispatcher.Dispatch(new GetGroupAction { Id = id });
        groups = new List<SimpleIdServer.IdServer.Domains.Group>();
    }

    void OnExpand(TreeExpandEventArgs args)
    {
        var group = args.Value as SimpleIdServer.IdServer.Domains.Group;
        var children = group.Children;
        if (group.Children == null || !group.Children.Any())
        {
            children = groupRepository.Query().Where(g => g.ParentGroupId == group.Id).AsNoTracking().ToList();
        }

        args.Children.Template = treeTemplate;
        args.Children.Data = children;
        args.Children.TextProperty = "Name";
        args.Children.HasChildren = (g) => true;
    }

    void OnChange(int index)
    {
        var rec = mappingActionNameToIndex.Single(kvp => kvp.Value == index);
        navigationManager.NavigateTo($"/groups/{id}/{rec.Key}");
    }
}