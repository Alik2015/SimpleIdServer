@using SimpleIdServer.IdServer.Api.Token.Handlers;
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.ClientStore;
@using SimpleIdServer.IdServer.Website.Stores.ScopeStore;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@using SimpleIdServer.IdServer.WsFederation
@using SimpleIdServer.IdServer.WsFederation.Extensions;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher dispatcher
@inject IState<UpdateClientState> updateClientState
@inject TooltipService tooltipService
@inject NotificationService notificationService

<RadzenTemplateForm Submit=@SubmitUpdateClient TItem="UpdateClient" Data=@updateClient>
    <RadzenAccordion Multiple=true>    
        <Items>
            <RadzenAccordionItem Text="General settings" Selected=true>
                <!-- Client ID -->
                <div class="row">
                    <div class="col-md-2">
                        <RadzenLabel Text="Client ID" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenTextBox Name="ClientId" @bind-Value="@updateClient.ClientId" Class="w-100" Disabled=true></RadzenTextBox>
                    </div>
                </div>
                <!-- Name -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenLabel Text="Name" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenTextBox Name="ClientId" @bind-Value="@updateClient.ClientName" Class="w-100"></RadzenTextBox>
                    </div>
                </div>
            </RadzenAccordionItem>
            @if (Client.ClientType == ClientTypes.SPA || Client.ClientType == ClientTypes.WEBSITE || Client.ClientType == ClientTypes.EXTERNAL || Client.ClientType == ClientTypes.MOBILE || Client.ClientType == ClientTypes.HIGHLYSECUREDWEBSITE || Client.ClientType == ClientTypes.GRANTMANAGEMENT)
            {
                <RadzenAccordionItem Text="Access settings" Selected=true>
                    <!-- Redirect URIs -->
                    <div class="row">
                        <div class="col-md-2">
                            <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, "Valid URI pattern a browser can redirect to after a successful login. <br /> Redirection URLs must be passed as a list of URL separated by ;"))" />
                            <RadzenLabel Text="Validation redirection URIs" Style="padding: 0px;" />
                        </div>
                        <div class="col">
                            <RadzenTextBox Name="RedirectionUris" @bind-Value="@updateClient.RedirectionUrls" Class="w-100"></RadzenTextBox>
                        </div>
                    </div>
                    <!-- Post logout redirect URIs -->
                    <div class="row mt-2">
                        <div class="col-md-2">
                            <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, "Array of URLs supplied by the RP to which it MAY request that the End-User's User Agent be redirected using the post_logout_redirect_uri parameter after a logout has been performed. <br /> Post Logout URLs must be passed as a list of URL separated by ;"))" />
                            <RadzenLabel Text="Validation post logout redirect URIs" Style="padding: 0px;" />
                        </div>
                        <div class="col">
                            <RadzenTextBox Name="PostLogoutRedirectUris" @bind-Value="@updateClient.PostLogoutRedirectUris" Class="w-100"></RadzenTextBox>
                        </div>
                    </div>
                </RadzenAccordionItem>
            }

            @if(Client.ClientType != WsFederationConstants.CLIENT_TYPE)
            {                
                <RadzenAccordionItem Text="Capability config" Selected=true>
                    <!-- Grant types -->
                    <div class="row">
                        <div class="col-md-2">
                            <RadzenLabel Text="Access request" Style="padding: 0px;" />
                        </div>
                        <div class="col">
                            @if(Client.ClientType == ClientTypes.MACHINE)
                            {
                                <!-- Client credentials  -->
                                <div>
                                    <RadzenCheckBox Name="IsClientCredentialsGrantTypeEnabled" Disabled=true @bind-Value=updateClient.IsClientCredentialsGrantTypeEnabled></RadzenCheckBox>
                                    <RadzenLabel Text="Client credentials" Component="IsClientCredentialsGrantTypeEnabled" Style="margin-left: 8px; vertical-align: middle;" />
                                </div>
                                <!-- Password -->
                                <div>
                                    <RadzenCheckBox Name="IsPasswordGrantTypeEnabled" @bind-Value=updateClient.IsPasswordGrantTypeEnabled></RadzenCheckBox>
                                    <RadzenLabel Text="Password" Component="IsPasswordGrantTypeEnabled" Style="margin-left: 8px; vertical-align: middle;" />
                                </div>
                                <!-- Refresh token -->
                                <div>
                                    <RadzenCheckBox Name="IsRefreshTokenGrantTypeEnabled" @bind-Value=updateClient.IsRefreshTokenGrantTypeEnabled></RadzenCheckBox>
                                    <RadzenLabel Text="Refresh token" Component="IsRefreshTokenGrantTypeEnabled" Style="margin-left: 8px; vertical-align: middle;" />
                                </div>
                            }

                            @if (Client.ClientType == ClientTypes.WEBSITE || Client.ClientType == ClientTypes.MOBILE || Client.ClientType == ClientTypes.EXTERNAL || Client.ClientType == ClientTypes.HIGHLYSECUREDWEBSITE || Client.ClientType == ClientTypes.GRANTMANAGEMENT)
                            {
                                <!-- Authorization code  -->
                                <div>
                                    <RadzenCheckBox Name="IsAuthorizationCodeGrantTypeEnabled" Disabled=true @bind-Value=updateClient.IsAuthorizationCodeGrantTypeEnabled></RadzenCheckBox>
                                    <RadzenLabel Text="Authorization code" Component="IsAuthorizationCodeGrantTypeEnabled" Style="margin-left: 8px; vertical-align: middle;" />
                                </div>
                                <!-- CIBA -->
                                <div>
                                    <RadzenCheckBox Name="IsCIBAGrantTypeEnabled" @bind-Value=updateClient.IsCIBAGrantTypeEnabled></RadzenCheckBox>
                                    <RadzenLabel Text="CIBA" Component="IsCIBAGrantTypeEnabled" Style="margin-left: 8px; vertical-align: middle;" />
                                </div>
                                <!-- UMA -->
                                <div>
                                    <RadzenCheckBox Name="IsUMAGrantTypeEnabled" @bind-Value=updateClient.IsUMAGrantTypeEnabled></RadzenCheckBox>
                                    <RadzenLabel Text="UMA" Component="IsUMAGrantTypeEnabled" Style="margin-left: 8px; vertical-align: middle;" />
                                </div>
                                <!-- Refresh token -->
                                <div>
                                    <RadzenCheckBox Name="IsRefreshTokenGrantTypeEnabled" @bind-Value=updateClient.IsRefreshTokenGrantTypeEnabled></RadzenCheckBox>
                                    <RadzenLabel Text="Refresh token" Component="IsRefreshTokenGrantTypeEnabled" Style="margin-left: 8px; vertical-align: middle;" />
                                </div>
                            }

                            @if(Client.ClientType == ClientTypes.DEVICE)
                            {
                                <!-- DEVICE -->
                                <div>
                                    <RadzenCheckBox Name="IsDeviceGrantTypeEnabled" @bind-Value=updateClient.IsDeviceGrantTypeEnabled></RadzenCheckBox>
                                    <RadzenLabel Text="Device" Component="IsDeviceGrantTypeEnabled" Style="margin-left: 8px; vertical-align: middle;" />
                                </div>
                            }

                            @if (Client.ClientType == ClientTypes.SPA)
                            {
                                <!-- Authorization code  -->
                                <div>
                                    <RadzenCheckBox Name="IsAuthorizationCodeGrantTypeEnabled" Disabled=true @bind-Value=updateClient.IsAuthorizationCodeGrantTypeEnabled></RadzenCheckBox>
                                    <RadzenLabel Text="Authorization code" Component="IsAuthorizationCodeGrantTypeEnabled" Style="margin-left: 8px; vertical-align: middle;" />
                                </div>
                            }
                        </div>
                    </div>
                </RadzenAccordionItem>
            }

            @if (Client.ClientType == ClientTypes.SPA || Client.ClientType == ClientTypes.WEBSITE || Client.ClientType == ClientTypes.HIGHLYSECUREDWEBSITE || Client.ClientType == ClientTypes.GRANTMANAGEMENT || Client.ClientType == ClientTypes.MOBILE || Client.ClientType == ClientTypes.EXTERNAL)
            {
                <RadzenAccordionItem Text="Login settings" Selected=true>
                    <!-- Consent required -->
                    <div class="row">
                        <div class="col-md-2">
                            <RadzenLabel Text="Consent required" Style="padding: 0px;" />
                        </div>
                        <div class="col">
                            <RadzenCheckBox @bind-Value=updateClient.IsConsentEnabled></RadzenCheckBox>
                        </div>
                    </div>
                </RadzenAccordionItem>                
            }

            
            @if (Client.ClientType == ClientTypes.WEBSITE || Client.ClientType == ClientTypes.HIGHLYSECUREDWEBSITE || Client.ClientType == ClientTypes.GRANTMANAGEMENT || Client.ClientType == ClientTypes.SPA || Client.ClientType == ClientTypes.MOBILE || Client.ClientType == ClientTypes.EXTERNAL)
            {
                <RadzenAccordionItem Text="Logout settings" Selected=true>
                    <!-- Front-channel logout session required -->
                    <div class="row">
                        <div class="col-md-2">
                            <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, "Boolean value specifying whether the RP requires that iss (issuer) and sid (session id) query parameters be included to identify the RP session with the OP when the front_channel_logout_uri is used."))" />
                            <RadzenLabel Text="Front-channel logout session required" Style="padding: 0px;" />
                        </div>
                        <div class="col">
                            <RadzenCheckBox Name="FrontChannelLogoutSessionRequired" @bind-Value=updateClient.FrontChannelLogoutSessionRequired></RadzenCheckBox>
                        </div>
                    </div>
                    <!-- Front-channel logout URL -->
                    <div class="row mt-2">
                        <div class="col-md-2">
                            <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, "RP URL that will cause the RP to log itself out when rendered in an iframe by the OP."))" />
                            <RadzenLabel Text="Front-channel logout URL" Style="padding: 0px;" />
                        </div>
                        <div class="col">
                            <RadzenTextBox Name="FrontChannelLogoutUri" @bind-Value="@updateClient.FrontChannelLogoutUri" Class="w-100"></RadzenTextBox>
                        </div>
                    </div>
                    <!-- Backchannel logout session required  -->
                    <div class="row mt-2">
                        <div class="col-md-2">
                            <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, "Boolean value specifying whether the OP can pass a SID claim in the Logout token to identify the RP session with the OP. <br /> If supported, the sid claim is also included in ID tokens issued by the OP."))" />
                            <RadzenLabel Text="Backchannel logout session required" Style="padding: 0px;" />
                        </div>
                        <div class="col">
                            <RadzenCheckBox Name="BackChannelLogoutSessionRequired" @bind-Value="@updateClient.BackChannelLogoutSessionRequired"></RadzenCheckBox>
                        </div>
                    </div>
                    <!-- Back-channel logout URL -->
                    <div class="row mt-2">
                        <div class="col-md-2">
                            <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, "RP URL that will cause the RP to log itself out when sent a Logout Token by the OP."))" />
                            <RadzenLabel Text="Backchannel logout URL" Style="padding: 0px;" />
                        </div>
                        <div class="col">
                            <RadzenTextBox Name="BackChannelLogoutUri" @bind-Value="@updateClient.BackChannelLogoutUri" Class="w-100"></RadzenTextBox>
                        </div>
                    </div>
                </RadzenAccordionItem>
            }
        </Items>
    </RadzenAccordion>

    <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(updateClientState.Value.IsUpdating ? "Updating..." : "Update")" Disabled=@updateClientState.Value.IsUpdating />
</RadzenTemplateForm>


@code {
    [Parameter]
    public SimpleIdServer.IdServer.Domains.Client Client { get; set; }

    record UpdateClient
    {
        public string ClientId { get; set; } = null!;
        public string? ClientName { get; set; } = null;
        public string? RedirectionUrls { get; set; } = null;
        public string? PostLogoutRedirectUris { get; set; } = null;
        public bool FrontChannelLogoutSessionRequired { get; set; }
        public string? FrontChannelLogoutUri { get; set; } = null;
        public string? BackChannelLogoutUri { get; set; } = null;
        public bool BackChannelLogoutSessionRequired { get; set; }
        public bool IsClientCredentialsGrantTypeEnabled { get; set; }
        public bool IsPasswordGrantTypeEnabled { get; set; }
        public bool IsRefreshTokenGrantTypeEnabled { get; set; }
        public bool IsAuthorizationCodeGrantTypeEnabled { get; set; }
        public bool IsCIBAGrantTypeEnabled { get; set; }
        public bool IsUMAGrantTypeEnabled { get; set; }
        public bool IsConsentEnabled { get; set; }
        public bool IsDeviceGrantTypeEnabled { get; set; }
    }

    UpdateClient updateClient = new UpdateClient();

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            SubscribeToAction<UpdateClientDetailsSuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.ClientSettingsUpdated });
                StateHasChanged();
            });
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (this.Client == null) return;
        updateClient = new UpdateClient
        {
            ClientId = this.Client.ClientId,
            ClientName = this.Client.ClientName,
            RedirectionUrls = string.Join(';', this.Client.RedirectionUrls),
            PostLogoutRedirectUris = string.Join(';', this.Client.PostLogoutRedirectUris),
            FrontChannelLogoutUri = this.Client.FrontChannelLogoutUri,
            BackChannelLogoutUri = this.Client.BackChannelLogoutUri,
            FrontChannelLogoutSessionRequired = this.Client.FrontChannelLogoutSessionRequired,
            BackChannelLogoutSessionRequired = this.Client.BackChannelLogoutSessionRequired,
            IsConsentEnabled = !this.Client.IsConsentDisabled
        };
        if (this.Client.GrantTypes.Contains(ClientCredentialsHandler.GRANT_TYPE))
            updateClient.IsClientCredentialsGrantTypeEnabled = true;
        if (this.Client.GrantTypes.Contains(PasswordHandler.GRANT_TYPE))
            updateClient.IsPasswordGrantTypeEnabled = true;
        if (this.Client.GrantTypes.Contains(RefreshTokenHandler.GRANT_TYPE))
            updateClient.IsRefreshTokenGrantTypeEnabled = true;
        if (this.Client.GrantTypes.Contains(AuthorizationCodeHandler.GRANT_TYPE))
            updateClient.IsAuthorizationCodeGrantTypeEnabled = true;
        if (this.Client.GrantTypes.Contains(CIBAHandler.GRANT_TYPE))
            updateClient.IsCIBAGrantTypeEnabled = true;
        if (this.Client.GrantTypes.Contains(UmaTicketHandler.GRANT_TYPE))
            updateClient.IsUMAGrantTypeEnabled = true;
        if (this.Client.GrantTypes.Contains(DeviceCodeHandler.GRANT_TYPE))
            updateClient.IsDeviceGrantTypeEnabled = true;
    }

    void SubmitUpdateClient(UpdateClient client)
    {
        dispatcher.Dispatch(new UpdateClientDetailsAction 
        { 
            ClientId = client.ClientId,
            ClientName = client.ClientName,
            RedirectionUrls = client.RedirectionUrls,
            PostLogoutRedirectUris = client.PostLogoutRedirectUris,
            FrontChannelLogoutSessionRequired = client.FrontChannelLogoutSessionRequired,
            FrontChannelLogoutUri = client.FrontChannelLogoutUri,
            BackChannelLogoutUri = client.BackChannelLogoutUri,
            BackChannelLogoutSessionRequired = client.BackChannelLogoutSessionRequired,
            IsClientCredentialsGrantTypeEnabled = client.IsClientCredentialsGrantTypeEnabled,
            IsPasswordGrantTypeEnabled = client.IsPasswordGrantTypeEnabled,
            IsRefreshTokenGrantTypeEnabled = client.IsRefreshTokenGrantTypeEnabled,
            IsAuthorizationCodeGrantTypeEnabled = client.IsAuthorizationCodeGrantTypeEnabled,
            IsCIBAGrantTypeEnabled = client.IsCIBAGrantTypeEnabled,
            IsUMAGrantTypeEnabled = client.IsUMAGrantTypeEnabled,
            IsConsentEnabled = client.IsConsentEnabled,
            IsDeviceGrantTypeEnabled = client.IsDeviceGrantTypeEnabled
        });
    }

    void ShowTooltip(ElementReference eltRef, string msg)
    {
        tooltipService.Open(eltRef, msg, null);
    }
}