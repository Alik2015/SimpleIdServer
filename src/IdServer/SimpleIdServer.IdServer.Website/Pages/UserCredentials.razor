@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher dispatcher
@inject IState<UserCredentialsState> userCredentialsState
@inject DialogService dialogService
@inject IState<UpdateUserState> updateUserState
@inject ContextMenuService contextMenuService
@inject NotificationService notificationService

<p class="text-muted">
    List of user credentials. Only one credential per type can be enabled.
</p>

<RadzenButton class="mb-1" Click="@(args => AddCredential())" Icon="add" Text="Add credential" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium"></RadzenButton>

<RadzenDataGrid AllowFiltering="true" 
        AllowColumnResize="true"
        AllowAlternatingRows="false" 
        AllowSorting="true" 
        PageSize="30" 
        AllowPaging="true" 
        PagerHorizontalAlign="HorizontalAlign.Left" 
        ShowPagingSummary="true"
        IsLoading="@updateUserState.Value.IsUpdating"
        Count="@userCredentialsState.Value.Count"
        Data="@userCredentialsState.Value.UserCredentials"
        TItem="UserCredential" 
        ColumnWidth="300px">
    <Columns>
        <RadzenDataGridColumn TItem="UserCredential" Title="Active" Filterable="false" Sortable="false" Width="80px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <RadzenCheckBox @bind-Value=data.IsActive Change="@(args => Toggle(args, data))" TValue="bool" Disabled=@data.IsActive />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="UserCredential" Title="Type" Filterable="false" Sortable="false" Width="80px">
            <Template Context="data">
                @if(data.CredentialType == UserCredential.PWD)
                {
                    <span>Password</span>
                }
                else
                {
                    <span>One Time Password (OTP)</span>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="UserCredential" Title="Data" Filterable="false" Sortable="false" Width="80px">
            <Template Context="data">
                @if(data.CredentialType == UserCredential.OTP)
                {
                    <RadzenLink Text="Show data" 
                        @onmousedown="() => ShowData(data)"
                        @onclick:preventDefault="true" />
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="UserCredential" Filterable="false" Sortable="false" Width="80px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <RadzenButton Icon="more_vert" Click="@(args => ShowMoreContextMenu(data, args))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter]
    public SimpleIdServer.IdServer.Domains.User User { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            SubscribeToAction<RemoveUserCredentialSuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.UserCredentialRemoved });
                StateHasChanged();
            });
        }
    }

    void Toggle(bool isCheck, UserCredential credential)
    {
        dispatcher.Dispatch(new DefaultUserCredentialAction { CredentialId = credential.Id, UserId = User.Id });
    }

    async void ShowData(UserCredential credential)
    {        
        await dialogService.OpenAsync<CredentialInfoDialog>("Information", new Dictionary<string, object>
        {
            { "Credential", credential },
            { "User", User }
        }, new DialogOptions
        {
            Width = "700px",
            Height = "512px",
            Resizable = true,
            Draggable = true
        });
    }

    void ShowMoreContextMenu(UserCredential cred, MouseEventArgs args)
    {
        contextMenuService.Open(args, new List<ContextMenuItem>
        {
            new ContextMenuItem { Text = "Delete", Value = 1 },
            new ContextMenuItem { Text = "Reset", Value = 2 }
        }, async (a) => {
        if (a.Value.Equals(1))
        {
            var act = new RemoveUserCredentialAction { CredentialId = cred.Id, UserId = User.Id };
            dispatcher.Dispatch(act);
            contextMenuService.Close();
        }
        else if(a.Value.Equals(2))
        {
            await dialogService.OpenAsync<EditCredentialDialog>("Update credential", new Dictionary<string, object>
            {
                { "UserLogin", User.Id },
                { "Credential", cred }
            }, new DialogOptions
            {
                Width = "700px",
                Height = "512px",
                Resizable = true,
                Draggable = true
            });
            contextMenuService.Close();
        }
    });
    }

    async void AddCredential()
    {
        await dialogService.OpenAsync<AddCredentialDialog>("Add credential", new Dictionary<string, object> { { "UserId", User.Id } }, new DialogOptions
        {
            Width = "700px",
            Height = "512px",
            Resizable = true,
            Draggable = true
        });
    }
}