@using SimpleIdServer.IdServer.Api.Token.Handlers;
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.ClientStore;
@using SimpleIdServer.IdServer.Website.Stores.IdServerConfigurationStore;
@using SimpleIdServer.IdServer.Website.Stores.ScopeStore;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@using SimpleIdServer.IdServer.WsFederation
@using SimpleIdServer.IdServer.WsFederation.Extensions;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher dispatcher
@inject IState<UpdateClientState> updateClientState
@inject TooltipService tooltipService
@inject NotificationService notificationService

<RadzenTemplateForm Submit=@SubmitUpdateClient TItem="UpdateAdvancedClient" Data=@updateAdvancedClient>
    <RadzenAccordion Multiple=true>    
        <Items>
            <RadzenAccordionItem Text="OpenID configuration" Selected=true>
                <!-- IdTokenSignedResponseAlg -->
                <div class="row">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, "JWA algorithm used for signing ID tokens"))" />
                        <RadzenLabel Text="ID token signature algorithm" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenDropDown Name="IdTokenSignedResponseAlg" Class="w-100"
                                        Data=@SimpleIdServer.IdServer.Constants.AllSigningAlgs
                                        TValue="string"
                                        @bind-Value=@updateAdvancedClient.IdTokenSignedResponseAlg />
                    </div>
                </div>
                <!-- AuthorizationSignedResponseAlg -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, "JWA algorithm used for signing authorization response tokens when the response mode is jwt."))" />                        
                        <RadzenLabel Text="Authorization response signature algorithm" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenDropDown Name="AuthorizationSignedResponseAlg" Class="w-100"
                                        Data=@SimpleIdServer.IdServer.Constants.AllSigningAlgs
                                        TValue="string"
                                        @bind-Value=@updateAdvancedClient.AuthorizationSignedResponseAlg />
                    </div>
                </div>
                <!-- AuthorizationDataTypes -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, "Authorization data types supported by the client"))" />
                        <RadzenLabel Text="Authorization data types" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenTextBox Name="AuthorizationDataTypes" Class="w-100" @bind-Value=@updateAdvancedClient.AuthorizationDataTypes></RadzenTextBox>
                        <p class="text-muted">Authorization data types must be passed as a list separated by <b>;</b></p>
                    </div>
                </div>
                <!-- Response types -->
                <div class="row mt-1">
                    <div class="col-md-2">
                        <RadzenIcon Icon="info" MouseEnter="@(args => ShowTooltip(args, "Informs the Authorization Server of the desired authorization processing flow, including what parameters are returned from the endpoints used."))" />
                        <RadzenLabel Text="Response types" Style="padding: 0px;" />
                    </div>
                    <div class="col">
                        <RadzenDropDown @bind-Value=@selectedResponseTypes Chips=true Data=@responseTypes Multiple=true AllowClear=true Placeholder="Select Response Types" class="w-100"></RadzenDropDown>
                    </div>
                </div>
                <!-- Response modes -->
            </RadzenAccordionItem>
        </Items>
    </RadzenAccordion>

    <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(updateClientState.Value.IsUpdating ? "Updating..." : "Update")" Disabled=@updateClientState.Value.IsUpdating />
</RadzenTemplateForm>

@code {
    [Parameter]
    public SimpleIdServer.IdServer.Domains.Client Client { get; set; }

    IEnumerable<string> selectedResponseTypes { get; set; } = new List<string>();
    IEnumerable<string> responseTypes { get; set; } = new List<string>();

    record UpdateAdvancedClient
    {
        public string? IdTokenSignedResponseAlg { get; set; } = null;
        public string? AuthorizationSignedResponseAlg { get; set; } = null;
        public string? AuthorizationDataTypes { get; set; } = null;
    }

    UpdateAdvancedClient updateAdvancedClient = new UpdateAdvancedClient();

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            SubscribeToAction<GetOpenIdServerConfigurationSuccessAction>((act) =>
            {
                responseTypes = act.Configuration.ResponseTypesSupported.OrderBy(a => a).ToList();
                StateHasChanged();
            });
            SubscribeToAction<UpdateAdvancedClientSettingsSuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.ClientAdvancedSettingsUpdated });
                StateHasChanged();
            });
            dispatcher.Dispatch(new GetOpenIdServerConfigurationAction());
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (this.Client == null) return;
        updateAdvancedClient = new UpdateAdvancedClient
        {
            IdTokenSignedResponseAlg = Client.IdTokenSignedResponseAlg,
            AuthorizationSignedResponseAlg = Client.AuthorizationSignedResponseAlg,
            AuthorizationDataTypes = Client.AuthorizationDataTypes == null || !Client.AuthorizationDataTypes.Any() ? string.Empty : string.Join(";", Client.AuthorizationDataTypes)
        };
        selectedResponseTypes = Client.ResponseTypes.Where(r => !string.IsNullOrWhiteSpace(r));
    }

    void SubmitUpdateClient(UpdateAdvancedClient client)
    {
        dispatcher.Dispatch(new UpdateAdvancedClientSettingsAction
        {
            AuthorizationDataTypes = client.AuthorizationDataTypes,
            AuthorizationSignedResponseAlg = client.AuthorizationSignedResponseAlg,
            IdTokenSignedResponseAlg = client.IdTokenSignedResponseAlg,
            ResponseTypes = selectedResponseTypes,
            ClientId = Client.ClientId
        });
    }

    void ShowTooltip(ElementReference eltRef, string msg)
    {
        tooltipService.Open(eltRef, msg, null);
    }
}