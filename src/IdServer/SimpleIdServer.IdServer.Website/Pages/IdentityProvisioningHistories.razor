@using SimpleIdServer.IdServer.Api.Provisioning;
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.RealmStore;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher dispatcher
@inject IState<UserState> userState
@inject IState<RealmsState> realmsState
@inject IState<UpdateUserState> updateUserState
@inject DialogService dialogService
@inject ContextMenuService contextMenuService
@inject NotificationService notificationService

<p class="text-muted">Execution history.</p>

@if(IdentityProvisioning != null)
{
    <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="false"
                AllowSorting="true"
                PageSize="30"
                AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                IsLoading="@updateUserState.Value.IsUpdating"
                Count="@IdentityProvisioning.Histories.Count"
                Data="@IdentityProvisioning.Histories"
                TItem="IdentityProvisioningHistoryResult"
                ColumnWidth="300px">
        <Columns>
            <RadzenDataGridColumn TItem="IdentityProvisioningHistoryResult" Property="StartDateTime" Title="Start" Filterable="false" Sortable="true" SortOrder="SortOrder.Descending" FormatString="{0:dd/M/yyyy HH:mm:ss}" Width="80px" />
            <RadzenDataGridColumn TItem="IdentityProvisioningHistoryResult" Property="EndDateTime" Title="End" Filterable="false" Sortable="false" FormatString="{0:dd/M/yyyy HH:mm:ss}" Width="80px" />
            <RadzenDataGridColumn TItem="IdentityProvisioningHistoryResult" Property="NbRepresentations" Title="Number of extracted representations" Filterable="false" Sortable="false" Width="80px" />
            <RadzenDataGridColumn TItem="IdentityProvisioningHistoryResult" Title="Status" Filterable="false" Sortable="false" Width="80px">
                <Template Context="data">
                    @if (data.Status == IdentityProvisioningHistoryStatus.IMPORT)
                    {
                        <RadzenBadge Text="Imported" IsPill="true" BadgeStyle="BadgeStyle.Success"></RadzenBadge>
                    }
                    else if (data.Status == IdentityProvisioningHistoryStatus.START)
                    {
                        <RadzenBadge Text="Started" IsPill="true" BadgeStyle="BadgeStyle.Info"></RadzenBadge>
                    }
                    else if (data.Status == IdentityProvisioningHistoryStatus.EXPORT)
                    {
                        <RadzenBadge Text="Exported" IsPill="true" BadgeStyle="BadgeStyle.Info"></RadzenBadge>
                    }
                    else if (data.Status == IdentityProvisioningHistoryStatus.ERROR)
                    {
                        <RadzenBadge Text="Failed to extract" IsPill="true" BadgeStyle="BadgeStyle.Danger"></RadzenBadge>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="IdentityProvisioningHistoryResult" Title="Error Message" Filterable="false" Sortable="false" Width="80px">
                <Template Context="data">
                    @if (!string.IsNullOrWhiteSpace(data.ErrorMessage))
                    {
                        <RadzenButton Icon="search" Click="@(args => ShowAudit(data))" />
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    [Parameter]
    public IdentityProvisioningResult IdentityProvisioning { get; set; }


    async void ShowAudit(IdentityProvisioningHistoryResult history)
    {
        await dialogService.OpenAsync<RequestDialog>("Error", new Dictionary<string, object>
        {
            { "Content", history.ErrorMessage }
        }, new DialogOptions
        {
            Width = "700px",
            Height = "512px",
            Resizable = true,
            Draggable = true
        });
    }
}