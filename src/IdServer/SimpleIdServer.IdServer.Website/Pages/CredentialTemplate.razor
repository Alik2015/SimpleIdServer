@page "/credentialtemplates/{id}/{action}"
@using SimpleIdServer.IdServer.Website.Stores.CredentialTemplateStore;
@using SimpleIdServer.IdServer.Website.Stores.RealmStore;
@inherits Fluxor.Blazor.Web.Components.FluxorLayout
@inject NavigationManager navigationManager
@layout MainLayout
@inject IState<W3CCredentialTemplateState> w3cCredentialTemplate
@inject IState<CredentialTemplateState> credentialTemplate
@inject IDispatcher dispatcher

<RadzenBreadCrumb>
    <RadzenBreadCrumbItem Path="/credentialtemplates" Text="Credential templates" />
    <RadzenBreadCrumbItem Text="Credential template details" />
</RadzenBreadCrumb>

<RadzenText class="mt-3 mb-3 no-margin" Text="@credentialTemplate.Value.CredentialTemplate?.Id" TextStyle="TextStyle.DisplayH3" />

<div class="mb-1">
    <RadzenBadge Text="@credentialTemplate.Value.CredentialTemplate?.Format" IsPill="true" />
</div>

<RadzenCardLoader Variant="Variant.Filled" IsLoading=@credentialTemplate.Value.IsLoading>
    <RadzenTabs Change=@OnChange @bind-SelectedIndex="selectedIndex">
        <Tabs>
            <RadzenTabsItem Text="Details">
                <CredentialTemplateDetails CredentialTemplate="@credentialTemplate.Value.CredentialTemplate" />
            </RadzenTabsItem>
            <RadzenTabsItem Text="Display">
                <CredentialTemplateDisplay CredentialTemplate="@credentialTemplate.Value.CredentialTemplate" />
            </RadzenTabsItem>
            <RadzenTabsItem Text="Parameters">
                @if (credentialTemplate.Value.CredentialTemplate != null && credentialTemplate.Value.CredentialTemplate.Format == Vc.Constants.CredentialTemplateProfiles.W3CVerifiableCredentials && w3cCredentialTemplate.Value.ConcatenatedTypes != null)
                {
                    <W3CCredentialTemplateParameters CredentialTemplate="@w3cCredentialTemplate.Value"></W3CCredentialTemplateParameters>
                }
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</RadzenCardLoader>

@code {
    Dictionary<string, int> mappingActionNameToIndex = new Dictionary<string, int>
    {
        { "details", 0 },
        { "display", 1 },
        { "parameters", 2 }
    };

    [Parameter]
    public string id { get; set; }
    [Parameter]
    public string action { get; set; }

    int selectedIndex = 0;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            SubscribeToAction<SelectRealmSuccessAction>((act) =>
            {
                navigationManager.NavigateTo("/credentialtemplates");
            });
        }
    }

    void OnChange(int index)
    {
        var rec = mappingActionNameToIndex.Single(kvp => kvp.Value == index);
        navigationManager.NavigateTo($"/credentialtemplates/{id}/{rec.Key}");
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (string.IsNullOrWhiteSpace(id)) return;
        if (!string.IsNullOrWhiteSpace(action) && mappingActionNameToIndex.ContainsKey(action))
            selectedIndex = mappingActionNameToIndex[action];
        dispatcher.Dispatch(new GetCredentialTemplateAction { Id = id });
    }
}