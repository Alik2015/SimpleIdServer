@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject DialogService dialogService
@inject IState<UserState> userState
@inject IState<UserCredentialOffersState> credentialOffersState

@if(userState.Value.User != null && !string.IsNullOrWhiteSpace(userState.Value.User.Id))
{
    <div>
        <RadzenButton class="mb-1" Click="@(args => AddDID())" Icon="add" Text=@(string.IsNullOrWhiteSpace(userState.Value.User.Did) ? "Add DID" : "Update DID") ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium"></RadzenButton>
        @if (string.IsNullOrWhiteSpace(userState.Value.User.Did))
        {
            <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">There is no Decentralized Identifier (DID).</RadzenAlert>
        }
        else
        {
            <div>
                <!-- Decentralized Identifier -->
                <div>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Decentralized Identifier (DID)</RadzenText>
                    <RadzenTextBox @bind-Value="@userState.Value.User.Did" Class="w-100" Disabled=true></RadzenTextBox>
                    <p class="text-muted">Global unique identifier that enables an entity to be identified in a manner that is verifiable.</p>
                </div>
                <!-- Private Wallet Key -->
                <div>
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Private Key</RadzenText>
                    <RadzenPassword @bind-Value="@userState.Value.User.DidPrivateHex" Class="w-100" Disabled=true></RadzenPassword>
                    <p class="text-muted">Private Key of your wallet. Value is encoded in hexadecimal.</p>
                </div>
            </div>

            <div>
                <RadzenButton class="mb-1" Click="@(args => ShareCredential())" Icon="share" Text="Share credential" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium"></RadzenButton>
            </div>


            <RadzenDataGrid AllowFiltering="false"
                    AllowColumnResize="true"
                    AllowAlternatingRows="false"
                    AllowSorting="true"
                    PageSize="30"
                    AllowPaging="false"
                    PagerHorizontalAlign="HorizontalAlign.Left"
                    ShowPagingSummary="false"
                    IsLoading="@credentialOffersState.Value.IsLoading"
                    Count="@credentialOffersState.Value.Count"
                    Data="@credentialOffersState.Value.CredentialOffers"
                    TItem="SelectableUserCredentialOffer"
                    RowRender="@RowRender"
                    ColumnWidth="300px">
                <Columns>
                    <RadzenDataGridColumn TItem="SelectableUserCredentialOffer" Filterable="false" Sortable="false" Title="Credential Template" Width="80px">
                        <Template Context="data">
                            <RadzenLink Text="@data.Value.CredentialTemplateId" Path="@($"/credentialtemplates/{data.Value.CredentialTemplateId}/details")" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SelectableUserCredentialOffer" Filterable="false" Sortable="false" Title="Client" Width="80px">
                        <Template Context="data">
                            <RadzenLink Text="@data.Value.ClientId" Path="@($"/clients/{data.Value.ClientId}/settings")" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SelectableUserCredentialOffer" Filterable="false" Sortable="false" Title="Status" Width="80px">
                        <Template Context="data">
                            <RadzenBadge Text=@GetStatus(data) IsPill="true" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SelectableUserCredentialOffer" Property="Value.ExpirationDateTime" Filterable="false" Sortable="false" FormatString="{0:dd/M/yyyy HH:mm:ss}" Title="Expiration datetime" Width="80px" />
                    <RadzenDataGridColumn TItem="SelectableUserCredentialOffer" Property="Value.UpdateDateTime" Filterable="false" Sortable="true" FormatString="{0:dd/M/yyyy HH:mm:ss}" SortOrder=SortOrder.Descending Title="Modification datetime" Width="80px" />
                </Columns>
            </RadzenDataGrid>
        }
    </div>
}

@code {
    [Parameter]
    public SimpleIdServer.IdServer.Domains.User User { get; set; }

    async void AddDID()
    {
        await dialogService.OpenAsync<AddDIDDialog>("Add Decentralized Identifier", new Dictionary<string, object>
        {
            { "UserId", userState.Value.User.Id }
        }, new DialogOptions
        {
            Width = "700px",
            Height = "512px",
            Resizable = true,
            Draggable = true
        });
    }

    async void ShareCredential()
    {
        await dialogService.OpenAsync<ShareCredentialOfferDialog>("Share credential", new Dictionary<string, object>
        {
            { "UserId", userState.Value.User.Id },
            { "UserName", userState.Value.User.Name }
        }, new DialogOptions
        {
            Width = "700px",
            Height = "512px",
            Resizable = true,
            Draggable = true
        });
    }

    void RowRender(RowRenderEventArgs<SelectableUserCredentialOffer> row)
    {
        const string className = "class";
        if (row.Data.IsNew)
            row.Attributes.Add(className, "new");
        else if (row.Data.IsSelected)
            row.Attributes.Add(className, "active");
        else if (row.Attributes.ContainsKey(className))
            row.Attributes.Remove(className);
    }

    string GetStatus(SelectableUserCredentialOffer row) => row.Value.ExpirationDateTime <= DateTime.UtcNow ? "EXPIRED" : Enum.GetName(typeof(UserCredentialOfferStatus), row.Value.Status);
}