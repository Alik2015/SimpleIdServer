@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@using SimpleIdServer.IdServer.Website.Stores.AuthMethodsStore;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher dispatcher
@inject IState<UserState> userState
@inject IState<UpdateUserState> updateUserState
@inject IState<AuthMethodsState> authMethodsState
@inject NotificationService notificationService

<RadzenTemplateForm Submit=@UpdateUserSettings TItem="UpdateUserSettingsParameter" Data=@updateUserSettings>
    <!-- Identifier -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Identifier</RadzenText>
        <RadzenTextBox Name="Id" @bind-Value="@updateUserSettings.Id" Class="w-100" Disabled=true></RadzenTextBox>
    </div>
    <!-- Login -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Name</RadzenText>
        <RadzenTextBox Name="Login" @bind-Value="@updateUserSettings.Login" Class="w-100" Disabled=true></RadzenTextBox>
    </div>
    <!-- Created at -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Created at</RadzenText>
        <RadzenDatePicker @bind-Value=@updateUserSettings.CreateDateTime DateFormat="d" Class="w-100" Disabled=true />
    </div>
    <!-- Updated at -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Updated at</RadzenText>
        <RadzenDatePicker @bind-Value=@updateUserSettings.UpdateDateTime DateFormat="d" Class="w-100" Disabled=true />
    </div>
    <!-- Email -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Email</RadzenText>
        <RadzenTextBox Name="Email" @bind-Value="@updateUserSettings.Email" Class="w-100"></RadzenTextBox>
        <RadzenEmailValidator Component="Email" Text="Provide a valid email address"></RadzenEmailValidator>
    </div>
    <!-- First name -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">First name</RadzenText>
        <RadzenTextBox Name="Firstname" @bind-Value="@updateUserSettings.Firstname" Class="w-100"></RadzenTextBox>
    </div>
    <!-- Last name -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Last name</RadzenText>
        <RadzenTextBox Name="Lastname" @bind-Value="@updateUserSettings.Lastname" Class="w-100"></RadzenTextBox>
    </div>
    <!-- Notification Mode -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Notification mode</RadzenText>
        <RadzenDropDown Class="w-100"
            Data=@authMethodsState.Value.AuthenticationMethods.Where(m => m.Capabilities.HasFlag(AuthenticationMethodCapabilities.PUSHNOTIFICATION))
            TextProperty="Name"
            ValueProperty="Id"
            TValue="string"
            @bind-Value=@updateUserSettings.NotificationMode></RadzenDropDown>
    </div>
    <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(updateUserState.Value.IsUpdating ? "Updating..." : "Update")" Disabled=@updateUserState.Value.IsUpdating />
</RadzenTemplateForm>
@code {
    [Parameter]
    public SimpleIdServer.IdServer.Domains.User User { get; set; }

    UpdateUserSettingsParameter updateUserSettings = new UpdateUserSettingsParameter();

    class UpdateUserSettingsParameter
    {
        public string Id { get; set; } = null!;
        public string Login { get; set; } = null!;
        public DateTime CreateDateTime { get; set; }
        public DateTime UpdateDateTime { get; set; }
        public string? Email { get; set; } = null;
        public string? Firstname { get; set; } = null;
        public string? Lastname { get; set; } = null;
        public string? NotificationMode { get; set; } = null;
    }

    record NotificationMode
    {
        public string Name { get; set; }
        public string DisplayName { get; set; }
    }

    ICollection<NotificationMode> NotificationModes = new List<NotificationMode>
    {
        new NotificationMode { DisplayName = "Email", Name = "email" },
        new NotificationMode { DisplayName = "Sms", Name = "sms" },
        new NotificationMode { DisplayName = "Firebase", Name = "firebase" }
    };

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if(firstRender)
        {            
            SubscribeToAction<UpdateUserDetailsSuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.UserDetailsUpdated });
                StateHasChanged();
            });
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (this.User == null) return;
        updateUserSettings = new UpdateUserSettingsParameter
        {
            Id = this.User.Id,
            Login = this.User.Name,
            CreateDateTime = this.User.CreateDateTime,
            UpdateDateTime = this.User.UpdateDateTime,
            Email = this.User.Email,
            Firstname = this.User.Name,
            Lastname = this.User.Lastname
        };
    }

    void UpdateUserSettings(UpdateUserSettingsParameter parameter)
    {
        var act = new UpdateUserDetailsAction { Email = parameter.Email, Firstname = parameter.Firstname, Lastname = parameter.Lastname, UserId = this.User.Id };
        dispatcher.Dispatch(act);
    }
}