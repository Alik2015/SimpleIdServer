@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.CredentialTemplateStore;
@using SimpleIdServer.Vc.Models;
@inject IState<W3CCredentialTemplateState> credentialTemplateState
@inject IState<UpdateCredentialTemplateState> updateCredentialTemplateState
@inject IDispatcher dispatcher
@inject NotificationService notificationService
@inject ContextMenuService contextMenuService
@inject DialogService dialogService
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<RadzenTemplateForm Submit=@UpdateW3CCredentialTemplateParameters TItem="W3CCredentialTemplateParametersForm" Data=@credentialTemplateParameters>
    <!-- Types -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Types</RadzenText>
        <RadzenTextBox Name="Types" @bind-Value="@credentialTemplateParameters.Types" Class="w-100"></RadzenTextBox>
        <p class="text-muted">
            List of types separated by <b>;</b> <br/>
            Array designating the types of a certain credential type supports for example <b>UniversityDegreeCredential</b>.
        </p>
    </div>

    <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(updateCredentialTemplateState.Value.IsLoading ? "Updating..." : "Update")" Disabled=updateCredentialTemplateState.Value.IsLoading />
</RadzenTemplateForm>

<h3>Credential subjects</h3>

<RadzenButton class="mb-1" Click="@(args => AddCredentialSubject())" Icon="add" Text="Add subject" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium"></RadzenButton>

<RadzenDataGrid
        AllowFiltering="false" 
        AllowColumnResize="true"
        AllowAlternatingRows="false" 
        AllowSorting="false" 
        PageSize="30" 
        AllowPaging="false" 
        PagerHorizontalAlign="HorizontalAlign.Left" 
        ShowPagingSummary="true"
        IsLoading="@credentialTemplateState.Value.IsLoading"
        Count="@credentialTemplateState.Value.Count"
        Data="@credentialTemplateState.Value.CredentialSubjects"
        RowRender="@RowRender"
        TItem="SelectableW3CCredentialSubjectRecord" 
        ColumnWidth="300px">
    <Columns>
        <RadzenDataGridColumn TItem="SelectableW3CCredentialSubjectRecord" Filterable="false" Sortable="false" Width="80px" TextAlign="TextAlign.Center">
            <HeaderTemplate>
                <RadzenCheckBox @bind-Value=@selectAll Change="@(args => ToggleAll(args))" TValue="bool" />
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox @bind-Value=@data.IsSelected Change="@(args => ToggleChanged(args, data))" TValue="bool" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="SelectableW3CCredentialSubjectRecord" Property="ClaimName" Filterable="false" Sortable="false" Title="Claim" Width="80px" />
        <RadzenDataGridColumn TItem="SelectableW3CCredentialSubjectRecord" Property="CredentialSubject.Mandatory" Filterable="false" Sortable="false" Title="Mandatory" Width="80px" />
        <RadzenDataGridColumn TItem="SelectableW3CCredentialSubjectRecord" Property="CredentialSubject.ValueType" Filterable="false" Sortable="false" Title="Type of value" Width="80px" />
        <RadzenDataGridColumn TItem="SelectableW3CCredentialSubjectRecord" Filterable="false" Sortable="false" Width="80px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <RadzenButton Icon="more_vert" Click="@(args => ShowMoreContextMenu(data, args))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    [Parameter]
    public W3CCredentialTemplateState CredentialTemplate { get; set; }
    bool selectAll = false;

    record W3CCredentialTemplateParametersForm
    {
        public string Types { get; set; }
    }

    W3CCredentialTemplateParametersForm credentialTemplateParameters = new W3CCredentialTemplateParametersForm();

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            SubscribeToAction<RemoveSelectedCredentialSubjectsSuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.SelectedCredentialSubjectsRemoved });
                StateHasChanged();
            });
            SubscribeToAction<UpdateW3CCredentialTemplateTypesSuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.CredentialTypesAreUpdated });
                StateHasChanged();
            });
        }
    }

    void UpdateW3CCredentialTemplateParameters(W3CCredentialTemplateParametersForm form)
    {
        var act = new UpdateW3CCredentialTemplateTypesAction { ConcatenatedTypes = form.Types, TechnicalId = CredentialTemplate.TechnicalId };
        dispatcher.Dispatch(act);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if(CredentialTemplate == null) return;
        credentialTemplateParameters.Types = CredentialTemplate.ConcatenatedTypes;
    }

    void ToggleAll(bool isSelected)
    {
        var act = new ToggleAllCredentialSubjectsAction { IsSelected = isSelected };
        dispatcher.Dispatch(act);
    }

    void ToggleChanged(bool isSelected, SelectableW3CCredentialSubjectRecord record)
    {
        var act = new ToggleCredentialSubjectAction { ClaimName = record.ClaimName, IsSelected = isSelected };
        dispatcher.Dispatch(act);
    }

    void ShowMoreContextMenu(SelectableW3CCredentialSubjectRecord record, MouseEventArgs args)
    {
        contextMenuService.Open(args, new List<ContextMenuItem>
        {
            new ContextMenuItem { Text = "Delete", Value = 1 }
        }, (a) => {
        if (a.Value.Equals(1))
        {
            var parameterIds = credentialTemplateState.Value.CredentialSubjects?.Where(c => c.IsSelected).Select(c => c.ParameterId)?.ToList();
            if (!parameterIds.Contains(record.ParameterId)) parameterIds.Add(record.ParameterId);
            var act = new RemoveSelectedCredentialSubjectsAction { ParameterIds = parameterIds, TechnicalId = CredentialTemplate.TechnicalId };
            dispatcher.Dispatch(act);
            contextMenuService.Close();
        }
    });
    }

    void RowRender(RowRenderEventArgs<SelectableW3CCredentialSubjectRecord> row)
    {
        const string className = "class";
        if (row.Data.IsNew)
            row.Attributes.Add(className, "new");
        else if (row.Data.IsSelected)
            row.Attributes.Add(className, "active");
        else if (row.Attributes.ContainsKey(className))
            row.Attributes.Remove(className);
    }

    async void AddCredentialSubject()
    {
        await dialogService.OpenAsync<AddCredentialSubjectDialog>("Add credential subject", new Dictionary<string, object>
        {
            { "TechnicalId", CredentialTemplate.TechnicalId }
        }, new DialogOptions
            {
                Width = "700px",
                Height = "512px",
                Resizable = true,
                Draggable = true
            });
    }
}