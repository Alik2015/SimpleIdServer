@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.CredentialTemplateStore;
@inject IState<CredentialTemplateDisplayState> displays
@inject IDispatcher dispatcher
@inject NotificationService notificationService
@inject ContextMenuService contextMenuService
@inject DialogService dialogService
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<RadzenButton class="mb-1" Click="@(args => AddDisplay())" Icon="add" Text="Add display" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium"></RadzenButton>

<RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="false"
                AllowSorting="true"
                PageSize="30"
                AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                IsLoading="@displays.Value.IsLoading"
                Count="@displays.Value.Count"
                Data="@displays.Value.CredentialTemplateDisplays"
                RowRender="@RowRender"
                TItem="SelectableCredentialTemplateDisplay"
                ColumnWidth="300px">
    <Columns>
        <RadzenDataGridColumn TItem="SelectableCredentialTemplateDisplay" Filterable="false" Sortable="false" Width="80px" TextAlign="TextAlign.Center">
            <HeaderTemplate>
                <RadzenCheckBox @bind-Value=@selectAll Change="@(args => ToggleAll(args))" TValue="bool" />
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox @bind-Value=@data.IsSelected Change="@(args => ToggleChanged(args, data))" TValue="bool" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="SelectableCredentialTemplateDisplay" Property="Value.Name" Filterable="false" Sortable="false" Title="Name" Width="80px" />
        <RadzenDataGridColumn TItem="SelectableCredentialTemplateDisplay" Property="Value.Description" Filterable="false" Sortable="false" Title="Description" Width="80px" />
        <RadzenDataGridColumn TItem="SelectableCredentialTemplateDisplay" Property="Value.Locale" Filterable="false" Sortable="false" Title="Language" Width="80px" />
        <RadzenDataGridColumn TItem="SelectableCredentialTemplateDisplay" Property="Value.LogoUrl" Filterable="false" Sortable="false" Title="Logo url" Width="80px" />
        <RadzenDataGridColumn TItem="SelectableCredentialTemplateDisplay" Property="Value.LogoAltText" Filterable="false" Sortable="false" Title="Logo alt text" Width="80px" />
        <RadzenDataGridColumn TItem="SelectableCredentialTemplateDisplay" Filterable="false" Sortable="false" FormatString="{0:dd/M/yyyy HH:mm:ss}" Width="80px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <RadzenButton Icon="more_vert" Click="@(args => ShowMoreContextMenu(data, args))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    bool selectAll = false;

    [Parameter]
    public SimpleIdServer.IdServer.Domains.CredentialTemplate CredentialTemplate { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            SubscribeToAction<RemoveSelectedCredentialTemplateDisplaySuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.SelectedCredentialTemplateDisplaysRemoved });
                StateHasChanged();
            });
        }
    }

    void ToggleAll(bool isSelected)
    {
        var act = new ToggleAllCredentialTemplateDisplayAction { IsSelected = isSelected };
        dispatcher.Dispatch(act);
    }

    void ToggleChanged(bool isSelected, SelectableCredentialTemplateDisplay display)
    {
        var act = new ToggleCredentialTemplateDisplayAction { IsSelected = isSelected, Id = CredentialTemplate.Id, DisplayId = display.Value.Id };
        dispatcher.Dispatch(act);
    }

    void RowRender(RowRenderEventArgs<SelectableCredentialTemplateDisplay> row)
    {
        const string className = "class";
        if (row.Data.IsNew)
            row.Attributes.Add(className, "new");
        else if (row.Data.IsSelected)
            row.Attributes.Add(className, "active");
        else if (row.Attributes.ContainsKey(className))
            row.Attributes.Remove(className);
    }

    void ShowMoreContextMenu(SelectableCredentialTemplateDisplay display, MouseEventArgs args)
    {
        contextMenuService.Open(args, new List<ContextMenuItem>
        {
            new ContextMenuItem { Text = "Delete", Value = 1 }
        }, (a) =>
    {
    if (a.Value.Equals(1))
    {
        var displayIds = displays.Value.CredentialTemplateDisplays?.Where(c => c.IsSelected).Select(c => c.Value.Id)?.ToList();
        if (!displayIds.Contains(display.Value.Id)) displayIds.Add(display.Value.Id);
        var act = new RemoveSelectedCredentialTemplateDisplayAction { Id = CredentialTemplate.TechnicalId, DisplayIds = displayIds };
        dispatcher.Dispatch(act);
        contextMenuService.Close();
    }
    });
    }

    async void AddDisplay()
    {
        await dialogService.OpenAsync<AddCredentialTemplateDisplayDialog>("Add display", new Dictionary<string, object>
        {
            { "CredentialTemplateId" , CredentialTemplate.TechnicalId }
        }, new DialogOptions
        {
            Width = "700px",
            Height = "512px",
            Resizable = true,
            Draggable = true
        });
    }
}