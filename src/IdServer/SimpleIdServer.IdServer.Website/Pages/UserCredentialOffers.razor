@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@inject IState<UserCredentialOffersState> credentialOffersState
@inject IDispatcher dispatcher
@inject DialogService dialogService
@inject NotificationService notificationService
@inject ContextMenuService contextMenuService
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="false"
                AllowSorting="true"
                PageSize="30"
                AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                IsLoading="@credentialOffersState.Value.IsLoading"
                Count="@credentialOffersState.Value.Count"
                Data="@credentialOffersState.Value.CredentialOffers"
                TItem="SelectableUserCredentialOffer"
                RowRender="@RowRender"
                ColumnWidth="300px">
    <Columns>
        <RadzenDataGridColumn TItem="SelectableUserCredentialOffer" Filterable="false" Sortable="false" Width="80px" TextAlign="TextAlign.Center">
            <HeaderTemplate>
                <RadzenCheckBox @bind-Value=@selectAll Change="@(args => ToggleAll(args))" TValue="bool" />
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox @bind-Value=@data.IsSelected Change="@(args => ToggleChanged(args, data))" TValue="bool" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="SelectableUserCredentialOffer" Title="Types" Filterable="false" Sortable="false" Width="80px">
            <Template Context="data">
                @foreach(var credentialName in data.Value.CredentialNames)
                {
                    <RadzenBadge Text="@credentialName" IsPill="true" />
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="SelectableUserCredentialOffer" Property="Value.CreateDateTime" Filterable="false" Sortable="false" FormatString="{0:dd/M/yyyy HH:mm:ss}" Title="Create datetime" Width="80px" />
        <RadzenDataGridColumn TItem="SelectableUserCredentialOffer" Property="Value.UpdateDateTime" Filterable="false" Sortable="true" FormatString="{0:dd/M/yyyy HH:mm:ss}" SortOrder=SortOrder.Descending Title="Create datetime" Width="80px" />
        <RadzenDataGridColumn TItem="SelectableUserCredentialOffer" Filterable="false" Sortable="false" Width="80px">
            <Template Context="data">
                <RadzenButton Icon="more_vert" Click="@(args => ShowMoreContextMenu(data, args))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    bool selectAll = false;

    [Parameter]
    public SimpleIdServer.IdServer.Domains.User User { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            SubscribeToAction<RemoveSelectedUserCredentialOffersSuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.SelectedCredentialOffersRemoved });
                StateHasChanged();
            });
        }
    }

    void RowRender(RowRenderEventArgs<SelectableUserCredentialOffer> row)
    {
        const string className = "class";
        if (row.Data.IsNew)
            row.Attributes.Add(className, "new");
        else if (row.Data.IsSelected)
            row.Attributes.Add(className, "active");
        else if (row.Attributes.ContainsKey(className))
            row.Attributes.Remove(className);
    }

    void ToggleAll(bool isSelected)
    {
        var act = new ToggleAllUserCredentialOffersAction { IsSelected = isSelected };
        dispatcher.Dispatch(act);
    }

    void ToggleChanged(bool isSelected, SelectableUserCredentialOffer row)
    {
        var act = new ToggleUserCredentialOfferAction { IsSelected = isSelected , CredentialOfferId = row.Value.Id, UserId = User.Id  };
        dispatcher.Dispatch(act);
    }

    void ShowMoreContextMenu(SelectableUserCredentialOffer credentialOffer, MouseEventArgs args)
    {
        contextMenuService.Open(args, new List<ContextMenuItem>
        {
            new ContextMenuItem { Text = "Delete", Value = 1 },
            new ContextMenuItem { Text = "Share", Value = 2 }
        }, async (a) =>
        {
            if (a.Value.Equals(1))
            {
                var credentialOfferIds = credentialOffersState.Value.CredentialOffers?.Where(c => c.IsSelected).Select(c => c.Value.Id)?.ToList();
                if (!credentialOfferIds.Contains(credentialOffer.Value.Id)) credentialOfferIds.Add(credentialOffer.Value.Id);
                var act = new RemoveSelectedUserCredentialOffersAction { CredentialOffersId = credentialOfferIds, UserId = User.Id };
                dispatcher.Dispatch(act);
                contextMenuService.Close();
            }
        });
    }
}