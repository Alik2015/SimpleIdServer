@page "/clients/{id}/{action}"
@using SimpleIdServer.IdServer.Website.Stores.ClientStore;
@using SimpleIdServer.IdServer.Website.Stores.RealmStore;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@inherits Fluxor.Blazor.Web.Components.FluxorLayout
@inject NotificationService notificationService
@inject NavigationManager navigationManager
@layout MainLayout
@inject IState<ClientState> clientState
@inject IDispatcher dispatcher

@if (clientState.Value.IsLoading)
{    
    <RadzenText class="mt-3 mb-3" Text="Wait..." TextStyle="TextStyle.DisplayH6" />
}
else
{
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/clients" Text="Clients" />
        <RadzenBreadCrumbItem Text="Client details" />
    </RadzenBreadCrumb>

    <RadzenText class="mt-3 mb-3" Text="@clientState.Value.Client.ClientId" TextStyle="TextStyle.DisplayH6" />

    <div class="mb-1">
        <RadzenBadge Text="@clientState.Value.Client.ClientType" IsPill="true" />
    </div>

    <RadzenTabs Change=@OnChange @bind-SelectedIndex="selectedIndex">
        <Tabs>
            <RadzenTabsItem Text="Details">
                <ClientSettings Client="@clientState.Value.Client"></ClientSettings>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Client scopes">
                <ClientScopes Client="@clientState.Value.Client"></ClientScopes>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Keys">
                <ClientKeys Client="@clientState.Value.Client"></ClientKeys>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Credentials">
                <ClientCredentials Client="@clientState.Value.Client"></ClientCredentials>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Roles">
                <ClientRoles Client="@clientState.Value.Client"></ClientRoles>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Advanced">
                <ClientAdvanced Client="@clientState.Value.Client"></ClientAdvanced>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}

@code {
    Dictionary<string, int> mappingActionNameToIndex = new Dictionary<string, int>
    {
        { "settings", 0 },
        { "scopes", 1 },
        { "keys", 2 },
        { "credentials", 3 },
        { "roles", 4 },
        { "advanced", 5 }
    };

    [Parameter]
    public string id { get; set; } = null!;

    [Parameter]
    public string? action { get; set; } = null;

    int selectedIndex = 0;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if(firstRender)
        {
            SubscribeToAction<SelectRealmSuccessAction>((act) =>
            {
                navigationManager.NavigateTo("/clients");
            });
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (string.IsNullOrWhiteSpace(id)) return;
        if (!string.IsNullOrWhiteSpace(action) && mappingActionNameToIndex.ContainsKey(action))
            selectedIndex = mappingActionNameToIndex[action];
        SubscribeToAction<GetClientFailureAction>((act) =>
        {
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = act.ErrorMessage });
            StateHasChanged();
        });
        dispatcher.Dispatch(new GetClientAction { ClientId = id });
    }

    void OnChange(int index)
    {
        var rec = mappingActionNameToIndex.Single(kvp => kvp.Value == index);
        navigationManager.NavigateTo($"/clients/{id}/{rec.Key}");
    }
}