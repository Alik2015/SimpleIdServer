@page "/credentialtemplates"
@inject IState<SearchCredentialTemplatesState> credentialTemplates
@inject IDispatcher dispatcher
@inject ContextMenuService contextMenuService
@inject NotificationService notificationService
@inject DialogService dialogService
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.CredentialTemplateStore;

<RadzenButton class="mb-1" Click="@(args => AddCredentialTemplate())" Icon="add" Text="Add credential template" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium"></RadzenButton>

<RadzenDataGrid @ref="credentialTemplateGrid"
                AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="false"
                AllowSorting="true"
                PageSize="30"
                AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                IsLoading="@credentialTemplates.Value.IsLoading"
                Count="@credentialTemplates.Value.Count"
                Data="@credentialTemplates.Value.CredentialTemplates"
                LoadData="@LoadData"
                RowRender="@RowRender"
                TItem="SelectableCredentialTemplate"
                ColumnWidth="300px">
    <Columns>
        <RadzenDataGridColumn TItem="SelectableCredentialTemplate" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
            <HeaderTemplate>
                <RadzenCheckBox @bind-Value=@selectAll Change="@(args => ToggleAll(args))" TValue="bool" />
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox @bind-Value=@data.IsSelected Change="@(args => ToggleChanged(args, data))" TValue="bool" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="SelectableCredentialTemplate" Filterable="false" Title="Format" Width="80px">
            <Template Context="data">
                <RadzenLink Text="@data.Value.Id" Path="@($"/credentialtemplates/{data.Value.TechnicalId}/details")" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="SelectableCredentialTemplate" Filterable="false" Title="Format" Width="80px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <RadzenBadge Text="@data.Value.Format" IsPill="true" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="SelectableCredentialTemplate" Property="Value.UpdateDateTime" Filterable="false" Sortable="true" FormatString="{0:dd/M/yyyy HH:mm:ss}" SortOrder="SortOrder.Descending" Title="Update datetime" Width="80px" />
        <RadzenDataGridColumn TItem="SelectableCredentialTemplate" Filterable="false" FormatString="{0:dd/M/yyyy HH:mm:ss}" Width="80px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <RadzenButton Icon="more_vert" Click="@(args => ShowMoreContextMenu(data, args))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    bool selectAll = false;
    RadzenDataGrid<SelectableCredentialTemplate> credentialTemplateGrid;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if(firstRender)
        {
            SubscribeToAction<RemoveSelectedCredentialTemplatesSuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.SelectedCredentialTemplatesRemoved });
                StateHasChanged();
            });
            if (!credentialTemplates.Value.IsLoading)
                credentialTemplateGrid.Reload();
        }
    }

    void ToggleAll(bool isSelected)
    {
        dispatcher.Dispatch(new ToggleAllCredentialTemplatesAction { IsSelected = isSelected });
    }

    void ToggleChanged(bool isSelected, SelectableCredentialTemplate credentialTemplate)
    {
        dispatcher.Dispatch(new ToggleCredentialTemplateAction { CredentialTemplateId = credentialTemplate.Value.Id, IsSelected = isSelected });
    }

    void LoadData(LoadDataArgs args)
    {
        var act = new SearchCredentialTemplatesAction { Filter = args.Filter, OrderBy = args.OrderBy, Skip = args.Skip, Take = args.Top };
        dispatcher.Dispatch(act);
    }

    void ShowMoreContextMenu(SelectableCredentialTemplate credentialTemplate, MouseEventArgs args)
    {
        contextMenuService.Open(args, new List<ContextMenuItem>
        {
            new ContextMenuItem { Text = "Delete", Value = 1 }
        }, (a) =>
    {
        if (a.Value.Equals(1))
        {
            var credentialTemplateIds = credentialTemplates.Value.CredentialTemplates?.Where(c => c.IsSelected).Select(c => c.Value.Id)?.ToList();
            if (!credentialTemplateIds.Contains(credentialTemplate.Value.Id)) credentialTemplateIds.Add(credentialTemplate.Value.Id);
            var act = new RemoveSelectedCredentialTemplatesAction { CredentialTemplateIds = credentialTemplateIds };
            dispatcher.Dispatch(act);
            contextMenuService.Close();
        }
    });
    }

    void RowRender(RowRenderEventArgs<SelectableCredentialTemplate> row)
    {
        const string className = "class";
        if (row.Data.IsNew)
            row.Attributes.Add(className, "new");
        else if (row.Data.IsSelected)
            row.Attributes.Add(className, "active");
        else if (row.Attributes.ContainsKey(className))
            row.Attributes.Remove(className);
    }

    async void AddCredentialTemplate()
    {
        await dialogService.OpenAsync<AddCredentialTemplateDialog>("Add credential template", new Dictionary<string, object>(), new DialogOptions
            {
                Width = "700px",
                Height = "512px",
                Resizable = true,
                Draggable = true
            });
    }
}