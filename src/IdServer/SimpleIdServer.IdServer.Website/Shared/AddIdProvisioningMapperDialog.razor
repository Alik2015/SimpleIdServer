@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using SimpleIdServer.IdServer.Api.Provisioning;
@using SimpleIdServer.IdServer.Website.Stores.IdProviderStore;
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.IdentityProvisioningStore;
@using System.Reflection;
@inject DialogService dialogService
@inject IState<UpdateIdentityProvisioningState> addIdProvisioningState
@inject NotificationService notificationService
@inject IDispatcher dispatcher

<RadzenSteps>
    <Steps>
        <RadzenStepsItem Text="Mapper Type">
            <div class="row gy-4">
                @foreach (var mappingRule in IdProvisioningMappingRules)
                {
                    <div class="col-md-6">
                        <RadzenCard @onclick="() => SelectMappingRule(mappingRule)" class="@(SelectedMappingRule != null && SelectedMappingRule.Name == mappingRule.Name ? "selected selectable" : "selectable")">
                            <div class="row">
                                <div class="col-md-3">
                                    <RadzenImage Path="@mappingRule.PictureUrl" Style="width: 60px" />
                                </div>
                                <div class="col">
                                    <h5>@mappingRule.Name</h5>
                                    <p class="text-muted">@(new MarkupString(mappingRule.ShortDescription))</p>
                                </div>
                            </div>
                        </RadzenCard>
                    </div>
                }
            </div>
        </RadzenStepsItem>
        <RadzenStepsItem Text="Create" Disabled=@(SelectedMappingRule == null || isAllowedAttributesLoading)>
            <EditIdProvisioningRule Id="@IdProvisioningId" MappingRule="@idProvisioningMappingRule" IsUpdating="@addIdProvisioningState.Value.IsUpdating" Saved="@AddIdentityProvisioningMappingRule" />
        </RadzenStepsItem>
    </Steps>
</RadzenSteps>

@code {
    [Parameter]
    public string IdProvisioningId { get; set; }
    IEnumerable<string> userProperties = new List<string>();
    bool isAllowedAttributesLoading { get; set; } = true;
    string errorMessage { get; set; }
    List<string> allowedAttributes { get; set; } = new List<string>();

    record IdProvisioningMappingRule
    {
        public string Name { get; set; } = null!;
        public string ShortDescription { get; set; } = null!;
        public string Description { get; set; } = null!;
        public MappingRuleTypes Type { get; set; }
        public string PictureUrl { get; set; } = null!;
    }

    IdentityProvisioningMappingRuleResult idProvisioningMappingRule = new IdentityProvisioningMappingRuleResult();

    ICollection<IdProvisioningMappingRule> IdProvisioningMappingRules { get; set; } = new List<IdProvisioningMappingRule>
    {
        new IdProvisioningMappingRule { Name = "Attribute", ShortDescription = "User attribute", Description = "Map one claim to a user attribute", Type = MappingRuleTypes.USERATTRIBUTE,  PictureUrl = "_content/SimpleIdServer.IdServer.Website/images/UserAttribute.png" },
        new IdProvisioningMappingRule { Name = "Property", ShortDescription = "User property", Description = "Map one claim to a user property", Type = MappingRuleTypes.USERPROPERTY, PictureUrl = "_content/SimpleIdServer.IdServer.Website/images/UserProperty.png" }
    };

    IdProvisioningMappingRule? SelectedMappingRule { get; set; } = null;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRenderAsync(firstRender);
        if(firstRender)
        {
            SubscribeToAction<AddIdentityProvisioningMappingRuleSuccessAction>((act) =>
            {
                dialogService.Close();
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.IdProvisioningMappingRuleAdded });
                StateHasChanged();
            });
            SubscribeToAction<GetIdentityProvisioningAllowedAttributesSuccessAction>((act) =>
            {
                isAllowedAttributesLoading = false;
                allowedAttributes = act.AllowedAttributes;
                StateHasChanged();
            });
            SubscribeToAction<GetIdentityProvisioningAllowedAttributesFailureAction>((act) =>
            {
                isAllowedAttributesLoading = false;
                errorMessage = act.ErrorMessage;
                StateHasChanged();
            });
        }

        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if(string.IsNullOrWhiteSpace(IdProvisioningId)) return;
        userProperties = typeof(User).GetProperties(BindingFlags.Instance | BindingFlags.Public)
                .Where(p =>
                {
                    var attr = p.GetCustomAttribute<UserPropertyAttribute>();
                    return attr == null ? false : attr.IsVisible;
                })
                .Select(p => p.Name);
        this.isAllowedAttributesLoading = true;
        dispatcher.Dispatch(new GetIdentityProvisioningAllowedAttributesAction { Id = IdProvisioningId });
    }

    void SelectMappingRule(IdProvisioningMappingRule mappingRule)
    {
        SelectedMappingRule = mappingRule;
        idProvisioningMappingRule.MapperType = mappingRule.Type;
    }

    void AddIdentityProvisioningMappingRule(IdentityProvisioningMappingRuleResult form)
    {
        dispatcher.Dispatch(new AddIdentityProvisioningMappingRuleAction
        {
            Id = IdProvisioningId,
            MappingRule = MappingRuleTypes.USERATTRIBUTE,
            From = form.From,
            TargetUserAttribute = form.TargetUserAttribute,
            HasMultipleAttribute = form.HasMultipleAttribute
        });
    }
}