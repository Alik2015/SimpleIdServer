@using Fluxor.Blazor.Web.Components;
@using SimpleIdServer.IdServer.Website.Stores.CredentialTemplateStore;
@using SimpleIdServer.Vc.Models;
@using SimpleIdServer.IdServer.Website.Resources
@inject IDispatcher dispatcher
@inherits FluxorComponent
@inject IState<UpdateCredentialTemplateState> updateCredentialTemplateState
@inject ContextMenuService contextMenuService
@inject DialogService dialogService
@inject NotificationService notificationService

<div>
    <!-- Claim name -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Claim name</RadzenText>
        <RadzenTextBox Name="ClaimName" @bind-Value="@addCredentialSubject.ClaimName" Class="w-100"></RadzenTextBox>
        <RadzenRequiredValidator Component="ClaimName" Text="Claim name is required"></RadzenRequiredValidator>
        <p class="text-muted">This object indicates the claims the Wallet would like to turn up in the credential to be issued.</p>
    </div>
    <!-- Mandatory -->
    <div>
        <div>
            <RadzenCheckBox @bind-Value="@addCredentialSubject.Mandatory"></RadzenCheckBox>
            <RadzenLabel Text="Mandatory" Style="margin-left: 8px; vertical-align: middle;" />
        </div>
        <p class="text-muted">Indicates the claim must be present in the issued credential.</p>
    </div>
    <!-- Value type -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Value type</RadzenText>
        <RadzenDropDown Name="ValueType" Class="w-100"
                        Data=@SimpleIdServer.Vc.Constants.AllCredentialSubjectDisplayTypes
                        TValue="string"
                        @bind-Value=@addCredentialSubject.ValueType />
    </div>
    <RadzenAccordion Multiple=true>    
        <Items>            
            <RadzenAccordionItem Text="Add display" Selected=true>
                <div>
                    <!-- Name -->
                    <div>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Name</RadzenText>
                        <RadzenTextBox Name="Name" @bind-Value="@addCredentialSubjectDisplay.Name" Class="w-100"></RadzenTextBox>
                        <RadzenRequiredValidator Component="Name" Text="Name is required"></RadzenRequiredValidator>
                        <p class="text-muted">Display name for the claim.</p>
                    </div>
                    <!-- Locale -->
                    <div>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Locale</RadzenText>
                        <RadzenTextBox Name="Locale" @bind-Value="@addCredentialSubjectDisplay.Locale" Class="w-100"></RadzenTextBox>
                        <RadzenRequiredValidator Component="Name" Text="Locale is required"></RadzenRequiredValidator>
                        <p class="text-muted">Identifies language of this object represented as a language tag values.</p>
                    </div>
                    <RadzenButton class="mb-1" Click="@SubmitAddCredentialSubjectDisplay" Icon="add" Text="Add display" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium"></RadzenButton>
                </div>
            </RadzenAccordionItem>
        </Items>
    </RadzenAccordion>
    <!-- Display -->
    <div>
        <RadzenDataGrid @ref="displaysGrid"
                        AllowFiltering="false"
                        AllowColumnResize="false"
                        AllowAlternatingRows="false"
                        AllowSorting="false"
                        PageSize="30"
                        AllowPaging="false"
                        PagerHorizontalAlign="HorizontalAlign.Left"
                        ShowPagingSummary="false"
                        IsLoading="false"
                        Count="@addCredentialSubject.Count"
                        Data="@addCredentialSubject.Displays"
                        RowRender="@RowRender"
                        TItem="SelectableW3CCredentialSubjectDisplay"
                        ColumnWidth="300px">
            <Columns>
                <RadzenDataGridColumn TItem="SelectableW3CCredentialSubjectDisplay" Filterable="false" Sortable="false" Width="80px" TextAlign="TextAlign.Center">
                    <HeaderTemplate>
                        <RadzenCheckBox @bind-Value=@selectAll Change="@(args => ToggleAll(args))" TValue="bool" />
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenCheckBox @bind-Value=@data.IsSelected Change="@(args => ToggleChanged(args, data))" TValue="bool" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="SelectableW3CCredentialSubjectDisplay" Property="Value.Name" Filterable="false" Sortable="false" Title="Name" Width="80px" />
                <RadzenDataGridColumn TItem="SelectableW3CCredentialSubjectDisplay" Property="Value.Locale" Filterable="false" Sortable="false" Title="Language" Width="80px" />
                <RadzenDataGridColumn TItem="SelectableW3CCredentialSubjectDisplay" Filterable="false" Sortable="false" Width="80px" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <RadzenButton Icon="more_vert" Click="@(args => ShowMoreContextMenu(data, args))" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
    <RadzenButton class="mt-1" Click="@SubmitAddCredentialSubject" Text="@(updateCredentialTemplateState.Value.IsLoading ? "Adding..." : "Add subject")" Disabled=@updateCredentialTemplateState.Value.IsLoading ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium"></RadzenButton>
</div>

@code {
    RadzenDataGrid<SelectableW3CCredentialSubjectDisplay> displaysGrid;

    [Parameter]
    public string TechnicalId { get; set; }

    record AddCredentialSubjectForm
    {
        public string ClaimName { get; set; }
        public bool Mandatory { get; set; } = false;
        public string ValueType { get; set; } = SimpleIdServer.Vc.Constants.CredentialSubjectDisplayTypes.String;
        public int Count { get; set; } = 0;
        public ICollection<SelectableW3CCredentialSubjectDisplay> Displays { get; set; } = new List<SelectableW3CCredentialSubjectDisplay>();
    }

    record AddCredentialSubjectDisplayForm
    {
        public string Name { get; set;}
        public string Locale { get; set; }
    }

    record SelectableW3CCredentialSubjectDisplay
    {
        public bool IsSelected { get; set; }
        public W3CCredentialSubjectDisplay Value { get; set; }
    }

    bool selectAll = false;

    AddCredentialSubjectForm addCredentialSubject = new AddCredentialSubjectForm();
    AddCredentialSubjectDisplayForm addCredentialSubjectDisplay = new AddCredentialSubjectDisplayForm();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SubscribeToAction<AddW3CCredentialTemplateCredentialSubjectSuccessAction>((act) =>
        {
            dialogService.Close();
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.CredentialSubjectAdded });
            StateHasChanged();
        });
    }

    void ShowMoreContextMenu(SelectableW3CCredentialSubjectDisplay display, MouseEventArgs args)
    {
        contextMenuService.Open(args, new List<ContextMenuItem>
        {
            new ContextMenuItem { Text = "Delete", Value = 1 }
        }, (a) => {
        if (a.Value.Equals(1))
        {
            addCredentialSubject.Displays = addCredentialSubject.Displays.Where(d => d.IsSelected || d.Value.Name == display.Value.Name).ToList();
            addCredentialSubject.Count = addCredentialSubject.Displays.Count();
        }
    });
    }

    void ToggleChanged(bool isSelected, SelectableW3CCredentialSubjectDisplay display)
    {
        display.IsSelected = isSelected;
    }

    void ToggleAll(bool isSelected)
    {
        var displays = addCredentialSubject.Displays;
        foreach (var display in displays) display.IsSelected = isSelected;
        addCredentialSubject.Displays = displays;
    }

    void SubmitAddCredentialSubject()
    {
        var act = new AddW3CCredentialTemplateCredentialSubjectAction
        {
            TechnicalId = TechnicalId,
            ClaimName = addCredentialSubject.ClaimName,
            Subject = new W3CCredentialSubject
            {
                Mandatory = addCredentialSubject.Mandatory,
                ValueType = addCredentialSubject.ValueType,
                Display = addCredentialSubject.Displays.Select(d => new W3CCredentialSubjectDisplay
                {
                    Locale = d.Value.Locale,
                    Name = d.Value.Name
                }).ToList()
            }
        };
        dispatcher.Dispatch(act);
    }

    void SubmitAddCredentialSubjectDisplay()
    {
        addCredentialSubject.Displays.Add(new SelectableW3CCredentialSubjectDisplay
        {
            IsSelected = false,
            Value = new W3CCredentialSubjectDisplay
            {
                Locale = addCredentialSubjectDisplay.Locale,
                Name = addCredentialSubjectDisplay.Name
            }
        });
        addCredentialSubject.Count = addCredentialSubject.Displays.Count();
        displaysGrid.Reload();
        StateHasChanged();
    }

    void RowRender(RowRenderEventArgs<SelectableW3CCredentialSubjectDisplay> row)
    {
        const string className = "class";
        if (row.Data.IsSelected)
            row.Attributes.Add(className, "active");
        else if (row.Attributes.ContainsKey(className))
            row.Attributes.Remove(className);        
    }
}