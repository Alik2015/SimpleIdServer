@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.EthrNetworkStore;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IState<UpdateEthrNetworkState> updateEthrNetwork
@inject Radzen.DialogService dialogService
@inject NotificationService notificationService
@inject IDispatcher dispatcher

<RadzenTemplateForm Submit=@AddEthrNetwork TItem="AddEthrNetworkForm" Data=@addEthrNetwork>
    @if (!updateEthrNetwork.Value.IsUpdating && !string.IsNullOrWhiteSpace(updateEthrNetwork.Value.ErrorMessage))
    {
        <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">@updateEthrNetwork.Value.ErrorMessage</RadzenAlert>
    }

    <!-- Name -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Name</RadzenText>
        <RadzenTextBox Name="Name" @bind-Value="@addEthrNetwork.Name" Class="w-100"></RadzenTextBox>
        <RadzenRequiredValidator Component="Name" Text="Name is required"></RadzenRequiredValidator>
    </div>
    <!-- Rpc URL -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">RPC URL</RadzenText>
        <RadzenTextBox Name="RpcUrl" @bind-Value="@addEthrNetwork.RpcUrl" class="w-100"></RadzenTextBox>
        <RadzenRequiredValidator Component="RpcUrl" Text="RPC Url is required"></RadzenRequiredValidator>
        <p class="text-muted">URL of the ethereum provider, for example, <b>mainnet: https://rpc.sepolia.org</b></p>
    </div>
    <!-- Private Account Key -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Private account key</RadzenText>
        <RadzenTextBox Name="PrivateAccountKey" @bind-Value="@addEthrNetwork.PrivateAccountKey" class="w-100"></RadzenTextBox>
        <RadzenRequiredValidator Component="PrivateAccountKey" Text="Private account key is required"></RadzenRequiredValidator>
        <p class="text-muted">
            The private key of your Ethereum account  must be encoded into hexadecimal.
        </p>
    </div>
    <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(updateEthrNetwork.Value.IsUpdating ? "Adding..." : "Add")" Disabled=updateEthrNetwork.Value.IsUpdating />
</RadzenTemplateForm>

@code {
    record AddEthrNetworkForm
    {
        public string Name { get; set; }
        public string RpcUrl { get; set; }
        public string PrivateAccountKey { get; set; }
    }

    AddEthrNetworkForm addEthrNetwork = new AddEthrNetworkForm();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SubscribeToAction<AddEthrNetworkSuccessAction>((act) =>
        {
            dialogService.Close();
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.EthrNetworkAdded });
            StateHasChanged();
        });
    }

    void AddEthrNetwork(AddEthrNetworkForm network)
    {
        dispatcher.Dispatch(new AddEthrNetworkAction
        {
            Name = network.Name,
            RpcUrl = network.RpcUrl,
            PrivateAccountKey = network.PrivateAccountKey
        });
    }
}