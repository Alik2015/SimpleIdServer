@inherits FluxorComponent
@using Fluxor.Blazor.Web.Components;
@using SimpleIdServer.Configuration.DTOs;
@using SimpleIdServer.IdServer.Website.Stores.ConfigurationDefinitionStore;
@using SimpleIdServer.IdServer.Website.Stores.IdProviderStore;
@inject IState<ConfigurationDefinitionsState> configurationDefsState;

@if(Properties != null)
{
    <RadzenStack>
        @foreach (var property in Properties.OrderBy(p => p.Order))
        {
            <RadzenFormField Text="@property.DisplayName"  Variant=Variant.Outlined>
                <ChildContent>
                    @switch (property.Type)
                    {
                        case ConfigurationDefinitionRecordTypes.INPUT:
                            <RadzenTextBox @bind-Value="@property.Value"></RadzenTextBox>
                            break;
                        case ConfigurationDefinitionRecordTypes.CHECKBOX:
                            <RadzenCheckBox @bind-Value="@property.Value"></RadzenCheckBox>
                            break;
                        case ConfigurationDefinitionRecordTypes.PASSWORD:
                            <RadzenPassword @bind-Value="@property.Value"></RadzenPassword>
                            break;
                    }                
                </ChildContent>
                <Helper>
                    <RadzenText TextStyle="TextStyle.Caption">@property.Description</RadzenText>
                </Helper>
            </RadzenFormField>
        }
    </RadzenStack>

    <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(IsUpdating ? (IsAddForm ? "Adding..." : "Updating...") : (IsAddForm ? "Add" : "Update"))" Disabled=@IsUpdating Click="@(args => UpdateConfiguration())" />
}
    
@code {
    [Parameter]
    public string Name { get; set; } = null;
    [Parameter]
    public Dictionary<string, string> Values { get; set; }
    [Parameter]
    public bool IsUpdating { get; set; }
    [Parameter]
    public bool IsAddForm { get; set; } = false;
    [Parameter]
    public EventCallback<Dictionary<string, string>> PropertiesSaved { get; set; }
    List<EditableProperty> Properties { get; set; }

    record EditableProperty
    {
        public string Name { get; set; } = null!;
        public ConfigurationDefinitionRecordTypes Type { get; set; } = ConfigurationDefinitionRecordTypes.INPUT;
        public string DisplayName { get; set; }
        public string Description { get; set; }
        public string Value { get; set; }
        public int Order { get; set; }
        public ICollection<ConfigurationDefRecordValueResult> PossibleValues { get; set; } = new List<ConfigurationDefRecordValueResult>();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (configurationDefsState.Value.IsLoading || Properties != null) return;
        var configuration = configurationDefsState.Value.ConfigurationDefs.SingleOrDefault(c => c.Id == Name);
        if (configuration == null) return;
        Properties = configuration.Properties.Select(p => new EditableProperty
        {
            Name = p.Name,
            Type = p.Type,
            Order = p.Order,
            DisplayName = p.DisplayName,
            Description = p.Description,
            Value = Values != null && Values.ContainsKey(p.Name) ? Values[p.Name] : string.Empty
        }).ToList();
    }

    async void UpdateConfiguration()
    {
        await PropertiesSaved.InvokeAsync(Properties.ToDictionary(p => p.Name, p => p.Value));
    }
}