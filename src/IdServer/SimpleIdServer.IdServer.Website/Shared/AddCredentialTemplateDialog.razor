@using Fluxor.Blazor.Web.Components;
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.CredentialTemplateStore;
@inherits FluxorComponent
@inject IState<UpdateCredentialTemplateState> updateCredentialTemplateState
@inject IDispatcher dispatcher
@inject DialogService dialogService
@inject NotificationService notificationService

<RadzenSteps>
    <Steps>
        <RadzenStepsItem Text="Credential template type">
            <div class="row gy-4">
                @foreach (var appType in CredentialTemplateTypes)
                {
                    <div class="col-md-6">
                        <RadzenCard @onclick="() => SelectCredentialTemplate(appType)" class="@(SelectedCredentialTemplate != null && SelectedCredentialTemplate.Name == appType.Name ? "selected selectable" : "selectable")">
                            <div>
                                <h5>@appType.Name</h5>
                                <p class="text-muted">@(new MarkupString(appType.ShortDescription))</p>
                            </div>
                        </RadzenCard>
                    </div>
                }
            </div>

            <hr />

            @if (SelectedCredentialTemplate != null)
            {
                <h5><RadzenIcon Icon="info" /> @SelectedCredentialTemplate.Name</h5>
                <p class="text-muted">@(new MarkupString(SelectedCredentialTemplate.Description))</p>
            }
        </RadzenStepsItem>
        <RadzenStepsItem Text="Properties" Disabled="@(SelectedCredentialTemplate == null)">
            @if(SelectCredentialTemplate != null)
            {
                switch(SelectedCredentialTemplate.Type)
                {
                    case SimpleIdServer.Vc.Constants.CredentialTemplateProfiles.W3CVerifiableCredentials:
                        <RadzenTemplateForm Submit=@AddW3CCredentialTemplate TItem="W3CCredentialTemplate" Data=@w3cCredentialTemplate>
                            @if (!updateCredentialTemplateState.Value.IsLoading && !string.IsNullOrWhiteSpace(updateCredentialTemplateState.Value.ErrorMessage))
                            {
                                <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">@updateCredentialTemplateState.Value.ErrorMessage</RadzenAlert>
                            }

                            <!-- Type -->
                            <div>
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Type</RadzenText>
                                <RadzenTextBox Name="Name" @bind-Value="@w3cCredentialTemplate.Type" Class="w-100"></RadzenTextBox>
                                <RadzenRequiredValidator Component="Name" Text="Type is required"></RadzenRequiredValidator>
                                <p class="text-muted">Credential type for example UniversityDegreeCredential</p>
                            </div>
                            <!-- Name -->
                            <div>
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Name</RadzenText>
                                <RadzenTextBox Name="Name" @bind-Value="@w3cCredentialTemplate.Name" Class="w-100"></RadzenTextBox>
                                <RadzenRequiredValidator Component="Name" Text="Name is required"></RadzenRequiredValidator>
                                <p class="text-muted">Display name of the credential</p>
                            </div>
                            <!-- Logo URL -->
                            <div>
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Logo URL</RadzenText>
                                <RadzenTextBox Name="Name" @bind-Value="@w3cCredentialTemplate.LogoUrl" Class="w-100"></RadzenTextBox>
                                <p class="text-muted">Wallet can obtain a logo of the Credential from the Credential Issuer</p>
                            </div>
                            <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(updateCredentialTemplateState.Value.IsLoading ? "Adding..." : "Save")" Disabled="@(updateCredentialTemplateState.Value.IsLoading)" />
                        </RadzenTemplateForm>
                        break;
                }
            }
        </RadzenStepsItem>
    </Steps>
</RadzenSteps>

@code {
    record CredentialTemplateType
    {
        public string Name { get; set; } = null!;
        public string ShortDescription { get; set; } = null!;
        public string Description { get; set; } = null!;
        public string Type { get; set; }
    }

    record W3CCredentialTemplate
    {
        public string Type { get; set; }
        public string Name { get; set; }
        public string LogoUrl { get; set; }
    }

    W3CCredentialTemplate w3cCredentialTemplate = new W3CCredentialTemplate();

    ICollection<CredentialTemplateType> CredentialTemplateTypes { get; set; } = new List<CredentialTemplateType>
    {
        new CredentialTemplateType { Name = "jwt_vc_json", ShortDescription = "W3C Verifiable Credential <a href='https://www.w3.org/TR/vc-data-model/#what-is-a-verifiable-credential' target='_blank'>https://www.w3.org/TR/vc-data-model/#what-is-a-verifiable-credential</a>", Description = "Verifiable credentials represent statements made by an issuer in a tamper-evident and privacy-respecting manner.", Type = SimpleIdServer.Vc.Constants.CredentialTemplateProfiles.W3CVerifiableCredentials }
    };

    CredentialTemplateType? SelectedCredentialTemplate { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SubscribeToAction<AddCredentialTemplateSuccessAction>(async (act) =>
        {
            dialogService.Close();
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.CredentialTemplateAdded });
            StateHasChanged();
        });
    }

    void SelectCredentialTemplate(CredentialTemplateType credentialTemplate)
    {
        SelectedCredentialTemplate = credentialTemplate;
    }

    void AddW3CCredentialTemplate(W3CCredentialTemplate credentialTemplate)
    {
        dispatcher.Dispatch(new AddW3CCredentialTemplateAction { LogoUrl = credentialTemplate.LogoUrl, Name = credentialTemplate.Name, Type = credentialTemplate.Type });
    }
}