@using Fluxor.Blazor.Web.Components;
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@inherits FluxorComponent
@inject Radzen.DialogService dialogService
@inject NotificationService notificationService
@inject IState<UpdateUserState> updateUserState
@inject IDispatcher dispatcher

<RadzenTemplateForm Submit=@SubmitAddCredentialOffer TItem="AddCredentialOfferForm" Data=@addCredentialOfferForm>
    @if (!updateUserState.Value.IsUpdating && !string.IsNullOrWhiteSpace(updateUserState.Value.ErrorMessage))
    {
        <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">@updateUserState.Value.ErrorMessage</RadzenAlert>
    }

    <!-- Credential types -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Credential types</RadzenText>
        <RadzenTextBox Name="Key" @bind-Value="@addApiResource.Name" Class="w-100"></RadzenTextBox>
        <RadzenRequiredValidator Component="Key" Text="Credential types are required"></RadzenRequiredValidator>
        <p class="text-muted">
            List of credential types separated by <b>;</b><br/>
            For example : VerifiableCredential;UniversityDegreeCredential
        </p>
    </div>
    <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="Add"  />
</RadzenTemplateForm>

@code {
    [Parameter]
    public string UserId { get; set; }

    record AddCredentialOfferForm
    {
        public string ConcatenatedTypes { get; set; }
    }

    AddCredentialOfferForm addCredentialOfferForm = new AddCredentialOfferForm();

    AddApiResource addApiResource = new AddApiResource();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SubscribeToAction<AddCredentialOfferSuccessAction>((act) =>
        {
            dialogService.Close();
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.CredentialOfferAdded });
            StateHasChanged();
        });
    }

    record AddApiResource
    {
        public string Name { get; set; } = null!;
        public string Description { get; set; } = null;
    }

    void SubmitAddCredentialOffer(AddCredentialOfferForm addApiResource)
    {
        dispatcher.Dispatch(new AddCredentialOfferAction { CredentialTypes = addApiResource.ConcatenatedTypes.Split(";").ToList(), UserId = UserId });
    }
}