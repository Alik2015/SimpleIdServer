@using Fluxor.Blazor.Web.Components;
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.CredentialTemplateStore;
@inject IState<UpdateCredentialTemplateState> updateCredentialState
@inject IDispatcher dispatcher
@inherits FluxorComponent
@inject NotificationService notificationService
@inject DialogService dialogService

<RadzenTemplateForm Submit=@SubmitAddDisplay TItem="AddCredentialTemplateDisplayForm" Data=@addDisplay>
    <!-- Name -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Name</RadzenText>
        <RadzenTextBox Name="Name" @bind-Value="@addDisplay.Name" Class="w-100"></RadzenTextBox>
        <RadzenRequiredValidator Component="Name" Text="Name is required"></RadzenRequiredValidator>
        <p class="text-muted">Display name for the credential.</p>
    </div>
    <!-- Locale -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Locale</RadzenText>
        <RadzenTextBox Name="Locale" @bind-Value="@addDisplay.Locale" Class="w-100"></RadzenTextBox>
        <RadzenRequiredValidator Component="Locale" Text="Locale is required"></RadzenRequiredValidator>
        <p class="text-muted">Identifies the language of this object.</p>
    </div>
    <!-- Description -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Description</RadzenText>
        <RadzenTextArea Name="Description" @bind-Value="@addDisplay.Description" Class="w-100"></RadzenTextArea>
        <p class="text-muted">Description of a credential.</p>
    </div>
    <!-- Logo URL -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Logo URL</RadzenText>
        <RadzenTextBox Name="LogoUrl" @bind-Value="@addDisplay.LogoUrl" Class="w-100"></RadzenTextBox>
        <p class="text-muted">URL where the wallet can obtain a logo of the credential from the credential issuer.</p>
    </div>
    <!-- Logo Alt Text -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Logo Alt Text</RadzenText>
        <RadzenTextBox Name="LogoAltText" @bind-Value="@addDisplay.LogoAltText" Class="w-100"></RadzenTextBox>
        <p class="text-muted">Alternative text of a logo image.</p>
    </div>
    <!-- Background color -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Background Color</RadzenText>
        <RadzenTextBox Name="BackgroundColor" @bind-Value="@addDisplay.BackgroundColor" Class="w-100"></RadzenTextBox>
        <p class="text-muted">Background color of the Credential represented as numerical color values defined in CSS Color Module for example #12107c.</p>
    </div>
    <!-- Text color -->
    <div>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Text Color</RadzenText>
        <RadzenTextBox Name="TextColor" @bind-Value="@addDisplay.TextColor" Class="w-100"></RadzenTextBox>
        <p class="text-muted">Text color of the Credential represented as numerical color values defined in CSS Color for example #FFFFFF.</p>
    </div>
    <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(updateCredentialState.Value.IsLoading ? "Adding..." : "Save")" Disabled="@(updateCredentialState.Value.IsLoading)" />
</RadzenTemplateForm>

@code {
    [Parameter]
    public string CredentialTemplateId { get; set; }

    record AddCredentialTemplateDisplayForm
    {
        public string Name { get; set; } = null!;
        public string Locale { get; set; } = null!;
        public string? Description { get; set; } = null;
        public string? LogoUrl { get; set; } = null;
        public string? LogoAltText { get; set; } = null;
        public string? BackgroundColor { get; set;} = null;
        public string? TextColor { get; set; } = null;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            SubscribeToAction<AddCredentialTemplateDisplaySuccessAction>((act) =>
            {
                notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = Global.CredentialTemplateDisplayAdded });
                dialogService.Close();
                StateHasChanged();
            });
        }
    }

    AddCredentialTemplateDisplayForm addDisplay = new AddCredentialTemplateDisplayForm();

    void SubmitAddDisplay(AddCredentialTemplateDisplayForm addDisplay)
    {
        dispatcher.Dispatch(new AddCredentialTemplateDisplayAction { BackgroundColor = addDisplay.BackgroundColor, CredentialTemplateId = CredentialTemplateId, Description = addDisplay.Description, Locale = addDisplay.Locale, LogoAltText = addDisplay.LogoAltText, LogoUrl = addDisplay.LogoUrl, Name = addDisplay.Name, TextColor = addDisplay.TextColor });
    }
}