@using Fluxor.Blazor.Web.Components;
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Website.Stores.ClientStore;
@using SimpleIdServer.IdServer.Website.Stores.CredentialTemplateStore;
@using SimpleIdServer.IdServer.Website.Stores.UserStore;
@inherits FluxorComponent
@inject Radzen.DialogService dialogService
@inject NotificationService notificationService
@inject IState<UpdateUserState> updateUserState
@inject IState<UserCredentialOfferState> credentialOfferState
@inject IState<SearchCredentialTemplatesState> searchCredentialTemplatesState
@inject IState<SearchClientsState> searchClientsState
@inject IDispatcher dispatcher

@if(searchClientsState.Value.Clients != null)
{
    <RadzenTemplateForm Submit=@SubmitAddCredentialOffer TItem="AddCredentialOfferForm" Data=@addCredentialOfferForm>
        @if (!updateUserState.Value.IsUpdating && !string.IsNullOrWhiteSpace(updateUserState.Value.ErrorMessage))
        {
            <RadzenAlert AllowClose="false" AlertStyle="AlertStyle.Danger" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">@updateUserState.Value.ErrorMessage</RadzenAlert>
        }

        <!-- Credential templates -->
        <div>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Credential types</RadzenText>
            <RadzenDropDown Name="CredTemplate" Data="@searchCredentialTemplatesState.Value.CredentialTemplates" @bind-Value="@addCredentialOfferForm.CredentialTemplate" TValue="SelectableCredentialTemplate" Class="w-100">
                <Template Context="dropdownContext">
                    @(dropdownContext.Value.Format + " - " + dropdownContext.Value.Id)
                </Template>
            </RadzenDropDown>
            <RadzenRequiredValidator Component="CredTemplate" Text="Please select a credential template"></RadzenRequiredValidator>
            <p class="text-muted">
                Generate an offer for one credential template
            </p>
        </div>
        <!-- Client -->
        <div>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Client Identifier</RadzenText>
            <RadzenDropDown Name="Client" Data="@searchClientsState.Value.Clients.Where(c => c.Value.ClientType == "WALLET")" @bind-Value="@addCredentialOfferForm.Client" TextProperty="Value.ClientId" TValue="SelectableClient" Class="w-100" />
            <RadzenRequiredValidator Component="Client" Text="Please select a client"></RadzenRequiredValidator>
            <p class="text-muted">
                Share a credential offer with one Client
            </p>
        </div>
        <RadzenButton class="mt-1" Variant="Variant.Flat" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="@(credentialOfferState.Value.IsLoading ? "Sharing..." : "Share")" Disabled=credentialOfferState.Value.IsLoading />
    </RadzenTemplateForm>

    if (!string.IsNullOrWhiteSpace(credentialOfferState.Value.Picture))
    {
        <div>
            <!-- QR Code -->
            <div>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">QR Code</RadzenText>
                <RadzenImage Path="@credentialOfferState.Value.Picture" Style="width: 200px" />
            </div>
            <!-- Url -->
            <div>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">URL</RadzenText>
                <RadzenTextBox Value="@credentialOfferState.Value.Url" Class="w-100" />
            </div>
        </div>
    }    
}

@code {
    [Parameter]
    public string UserId { get; set; }

    record AddCredentialOfferForm
    {
        public SelectableCredentialTemplate CredentialTemplate { get; set; }
        public SelectableClient Client { get; set; } 
    }

    AddCredentialOfferForm addCredentialOfferForm = new AddCredentialOfferForm();

    AddApiResource addApiResource = new AddApiResource();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SubscribeToAction<ShareCredentialOfferFailureAction>((act) =>
        {
            notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = act.ErrorMessage });
            StateHasChanged();
        });
        dispatcher.Dispatch(new SearchCredentialTemplatesAction { });
        dispatcher.Dispatch(new GetAllClientsAction { });
    }

    record AddApiResource
    {
        public string Name { get; set; } = null!;
        public string Description { get; set; } = null;
    }

    void SubmitAddCredentialOffer(AddCredentialOfferForm addCredentialOffer)
    {
        dispatcher.Dispatch(new ShareCredentialOfferAction { CredentialTemplateId = addCredentialOffer.CredentialTemplate.Value.TechnicalId, ClientId = addCredentialOffer.Client.Value.ClientId, UserId = UserId });
    }
}