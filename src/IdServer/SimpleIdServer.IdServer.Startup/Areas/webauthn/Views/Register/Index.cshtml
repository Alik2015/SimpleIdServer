@using Microsoft.Extensions.Options;
@using SimpleIdServer.IdServer.Options;
@using SimpleIdServer.IdServer.Startup.Resources;
@model SimpleIdServer.IdServer.Webauthn.UI.ViewModels.RegisterWebauthnViewModel

@inject IOptions<IdServerHostOptions> configuration

@{
    Layout = "~/Views/Shared/_RegisterLayout.cshtml";
    ViewBag.Title = AuthenticateSmsResource.title;
    var makeCredentialOptionsUrl = Url.Action("MakeCredentialsOptions", "Register", new { area = "webauthn" });
    var makeCredentialUrl = Url.Action("MakeCredential", "Register", new { area = "webauthn" });
}

<!-- Login form -->
<form id="registerWebauthn" target="#">    
    @Html.AntiForgeryToken()
    <div class="input-group mb-3">
        <input asp-for="Login" placeholder="@AuthenticateWebauthnResource.login" type="text" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary card-link">@AuthenticateWebauthnResource.register</button>
</form>

@section SubScripts {
    <script type="text/javascript">
        $(document).ready(function() {
            var makeCredentialOptionsUrl = "@makeCredentialOptionsUrl";
            var makeCredentialUrl = "@makeCredentialUrl";
            async function registerCredential(newCredential) {                
                let attestationObject = new Uint8Array(newCredential.response.attestationObject);
                let clientDataJSON = new Uint8Array(newCredential.response.clientDataJSON);
                let rawId = new Uint8Array(newCredential.rawId);
                const data = {                    
                    id: newCredential.id,
                    rawId: coerceToBase64Url(rawId),
                    type: newCredential.type,
                    extensions: newCredential.getClientExtensionResults(),
                    response: {
                        AttestationObject: coerceToBase64Url(attestationObject),
                        clientDataJSON: coerceToBase64Url(clientDataJSON)
                    }
                };
                let response;
                try
                {
                    response = await fetch(makeCredentialUrl, {
                        method: 'POST',
                        body: JSON.stringify(data),
                        headers: {
                            "Accept": "application/json",
                            "Content-Type": "application/json"
                        }
                    });
                }
                catch(e) {

                }
            }

            async function makeCredential(login) {
                let response = await fetch(makeCredentialOptionsUrl, {
                    method: 'POST',
                    body: JSON.stringify({ Login: login }),
                    headers: {
                        "Accept": "application/json",
                        "Content-Type": "application/json"
                    }
                });
                let makeCredentialOptions = await response.json();
                makeCredentialOptions.challenge = coerceToArrayBuffer(makeCredentialOptions.challenge);
                makeCredentialOptions.user.id = coerceToArrayBuffer(makeCredentialOptions.user.id);
                makeCredentialOptions.excludeCredentials = makeCredentialOptions.excludeCredentials.map((c) => {
                    c.id = coerceToArrayBuffer(c.id);
                    return c;
                });
                if (makeCredentialOptions.authenticatorSelection.authenticatorAttachment === null) makeCredentialOptions.authenticatorSelection.authenticatorAttachment = undefined;
                let newCredential;
                try {
                    newCredential = await navigator.credentials.create({
                        publicKey: makeCredentialOptions
                    });
                } catch (e) {
                    var msg = "Could not create credentials in browser. Probably because the username is already registered with your authenticator. Please change username or authenticator."
                    console.error(msg, e);
                    return;
                }

                await registerCredential(newCredential);
            };

            $("#registerWebauthn").submit(function(e) {
                e.preventDefault();
                var login = $("#registerWebauthn input[name='Login']").val();
                makeCredential(login);
            });
        });
    </script>
}